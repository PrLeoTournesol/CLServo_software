
CLServo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d8c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004f14  08004f14  00014f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f44  08004f44  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004f44  08004f44  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004f44  08004f44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f44  08004f44  00014f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f48  08004f48  00014f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004f4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000002a0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002ac  200002ac  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012b55  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000274c  00000000  00000000  00032bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012f0  00000000  00000000  00035320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ecf  00000000  00000000  00036610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001edf3  00000000  00000000  000374df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017e41  00000000  00000000  000562d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000beec0  00000000  00000000  0006e113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000051a4  00000000  00000000  0012cfd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  00132178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004efc 	.word	0x08004efc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004efc 	.word	0x08004efc

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 ff42 	bl	8001054 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f815 	bl	80001fe <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 fbb0 	bl	8000938 <MX_GPIO_Init>
  MX_ADC1_Init();
 80001d8:	f000 f86e 	bl	80002b8 <MX_ADC1_Init>
  MX_ADC3_Init();
 80001dc:	f000 f8dc 	bl	8000398 <MX_ADC3_Init>
  MX_CAN_Init();
 80001e0:	f000 f9a8 	bl	8000534 <MX_CAN_Init>
  MX_DAC_Init();
 80001e4:	f000 f9da 	bl	800059c <MX_DAC_Init>
  MX_I2C1_Init();
 80001e8:	f000 fa0e 	bl	8000608 <MX_I2C1_Init>
  MX_SPI1_Init();
 80001ec:	f000 fa4c 	bl	8000688 <MX_SPI1_Init>
  MX_ADC4_Init();
 80001f0:	f000 f942 	bl	8000478 <MX_ADC4_Init>
  MX_TIM2_Init();
 80001f4:	f000 fa86 	bl	8000704 <MX_TIM2_Init>
  MX_TIM3_Init();
 80001f8:	f000 fb10 	bl	800081c <MX_TIM3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001fc:	e7fe      	b.n	80001fc <main+0x34>

080001fe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001fe:	b580      	push	{r7, lr}
 8000200:	b09e      	sub	sp, #120	; 0x78
 8000202:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000204:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000208:	2228      	movs	r2, #40	; 0x28
 800020a:	2100      	movs	r1, #0
 800020c:	4618      	mov	r0, r3
 800020e:	f004 fe49 	bl	8004ea4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000212:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000216:	2200      	movs	r2, #0
 8000218:	601a      	str	r2, [r3, #0]
 800021a:	605a      	str	r2, [r3, #4]
 800021c:	609a      	str	r2, [r3, #8]
 800021e:	60da      	str	r2, [r3, #12]
 8000220:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000222:	463b      	mov	r3, r7
 8000224:	223c      	movs	r2, #60	; 0x3c
 8000226:	2100      	movs	r1, #0
 8000228:	4618      	mov	r0, r3
 800022a:	f004 fe3b 	bl	8004ea4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800022e:	2302      	movs	r3, #2
 8000230:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000232:	2301      	movs	r3, #1
 8000234:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000236:	2310      	movs	r3, #16
 8000238:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023a:	2302      	movs	r3, #2
 800023c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800023e:	2300      	movs	r3, #0
 8000240:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000242:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000246:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000248:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800024c:	4618      	mov	r0, r3
 800024e:	f002 fa9d 	bl	800278c <HAL_RCC_OscConfig>
 8000252:	4603      	mov	r3, r0
 8000254:	2b00      	cmp	r3, #0
 8000256:	d001      	beq.n	800025c <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000258:	f000 fbe0 	bl	8000a1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800025c:	230f      	movs	r3, #15
 800025e:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000260:	2302      	movs	r3, #2
 8000262:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000264:	2300      	movs	r3, #0
 8000266:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000268:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800026c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800026e:	2300      	movs	r3, #0
 8000270:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000272:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000276:	2102      	movs	r1, #2
 8000278:	4618      	mov	r0, r3
 800027a:	f003 fac5 	bl	8003808 <HAL_RCC_ClockConfig>
 800027e:	4603      	mov	r3, r0
 8000280:	2b00      	cmp	r3, #0
 8000282:	d001      	beq.n	8000288 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000284:	f000 fbca 	bl	8000a1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_ADC12
 8000288:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 800028c:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800028e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000292:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 8000294:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000298:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800029a:	2300      	movs	r3, #0
 800029c:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800029e:	463b      	mov	r3, r7
 80002a0:	4618      	mov	r0, r3
 80002a2:	f003 fc81 	bl	8003ba8 <HAL_RCCEx_PeriphCLKConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80002ac:	f000 fbb6 	bl	8000a1c <Error_Handler>
  }
}
 80002b0:	bf00      	nop
 80002b2:	3778      	adds	r7, #120	; 0x78
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b08a      	sub	sp, #40	; 0x28
 80002bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002be:	f107 031c 	add.w	r3, r7, #28
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
 80002d4:	60da      	str	r2, [r3, #12]
 80002d6:	611a      	str	r2, [r3, #16]
 80002d8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80002da:	4b2e      	ldr	r3, [pc, #184]	; (8000394 <MX_ADC1_Init+0xdc>)
 80002dc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002e0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80002e2:	4b2c      	ldr	r3, [pc, #176]	; (8000394 <MX_ADC1_Init+0xdc>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002e8:	4b2a      	ldr	r3, [pc, #168]	; (8000394 <MX_ADC1_Init+0xdc>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80002ee:	4b29      	ldr	r3, [pc, #164]	; (8000394 <MX_ADC1_Init+0xdc>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80002f4:	4b27      	ldr	r3, [pc, #156]	; (8000394 <MX_ADC1_Init+0xdc>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002fa:	4b26      	ldr	r3, [pc, #152]	; (8000394 <MX_ADC1_Init+0xdc>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000302:	4b24      	ldr	r3, [pc, #144]	; (8000394 <MX_ADC1_Init+0xdc>)
 8000304:	2200      	movs	r2, #0
 8000306:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000308:	4b22      	ldr	r3, [pc, #136]	; (8000394 <MX_ADC1_Init+0xdc>)
 800030a:	2201      	movs	r2, #1
 800030c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800030e:	4b21      	ldr	r3, [pc, #132]	; (8000394 <MX_ADC1_Init+0xdc>)
 8000310:	2200      	movs	r2, #0
 8000312:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000314:	4b1f      	ldr	r3, [pc, #124]	; (8000394 <MX_ADC1_Init+0xdc>)
 8000316:	2201      	movs	r2, #1
 8000318:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800031a:	4b1e      	ldr	r3, [pc, #120]	; (8000394 <MX_ADC1_Init+0xdc>)
 800031c:	2200      	movs	r2, #0
 800031e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000322:	4b1c      	ldr	r3, [pc, #112]	; (8000394 <MX_ADC1_Init+0xdc>)
 8000324:	2204      	movs	r2, #4
 8000326:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000328:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <MX_ADC1_Init+0xdc>)
 800032a:	2200      	movs	r2, #0
 800032c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800032e:	4b19      	ldr	r3, [pc, #100]	; (8000394 <MX_ADC1_Init+0xdc>)
 8000330:	2200      	movs	r2, #0
 8000332:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000334:	4817      	ldr	r0, [pc, #92]	; (8000394 <MX_ADC1_Init+0xdc>)
 8000336:	f000 fef3 	bl	8001120 <HAL_ADC_Init>
 800033a:	4603      	mov	r3, r0
 800033c:	2b00      	cmp	r3, #0
 800033e:	d001      	beq.n	8000344 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000340:	f000 fb6c 	bl	8000a1c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000344:	2300      	movs	r3, #0
 8000346:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000348:	f107 031c 	add.w	r3, r7, #28
 800034c:	4619      	mov	r1, r3
 800034e:	4811      	ldr	r0, [pc, #68]	; (8000394 <MX_ADC1_Init+0xdc>)
 8000350:	f001 fbb0 	bl	8001ab4 <HAL_ADCEx_MultiModeConfigChannel>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800035a:	f000 fb5f 	bl	8000a1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800035e:	2301      	movs	r3, #1
 8000360:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000362:	2301      	movs	r3, #1
 8000364:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000366:	2300      	movs	r3, #0
 8000368:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800036a:	2300      	movs	r3, #0
 800036c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800036e:	2300      	movs	r3, #0
 8000370:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000372:	2300      	movs	r3, #0
 8000374:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	4619      	mov	r1, r3
 800037a:	4806      	ldr	r0, [pc, #24]	; (8000394 <MX_ADC1_Init+0xdc>)
 800037c:	f001 f8b0 	bl	80014e0 <HAL_ADC_ConfigChannel>
 8000380:	4603      	mov	r3, r0
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000386:	f000 fb49 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800038a:	bf00      	nop
 800038c:	3728      	adds	r7, #40	; 0x28
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000028 	.word	0x20000028

08000398 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b08a      	sub	sp, #40	; 0x28
 800039c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800039e:	f107 031c 	add.w	r3, r7, #28
 80003a2:	2200      	movs	r2, #0
 80003a4:	601a      	str	r2, [r3, #0]
 80003a6:	605a      	str	r2, [r3, #4]
 80003a8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80003aa:	1d3b      	adds	r3, r7, #4
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
 80003b0:	605a      	str	r2, [r3, #4]
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	60da      	str	r2, [r3, #12]
 80003b6:	611a      	str	r2, [r3, #16]
 80003b8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80003ba:	4b2d      	ldr	r3, [pc, #180]	; (8000470 <MX_ADC3_Init+0xd8>)
 80003bc:	4a2d      	ldr	r2, [pc, #180]	; (8000474 <MX_ADC3_Init+0xdc>)
 80003be:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80003c0:	4b2b      	ldr	r3, [pc, #172]	; (8000470 <MX_ADC3_Init+0xd8>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80003c6:	4b2a      	ldr	r3, [pc, #168]	; (8000470 <MX_ADC3_Init+0xd8>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003cc:	4b28      	ldr	r3, [pc, #160]	; (8000470 <MX_ADC3_Init+0xd8>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80003d2:	4b27      	ldr	r3, [pc, #156]	; (8000470 <MX_ADC3_Init+0xd8>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80003d8:	4b25      	ldr	r3, [pc, #148]	; (8000470 <MX_ADC3_Init+0xd8>)
 80003da:	2200      	movs	r2, #0
 80003dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003e0:	4b23      	ldr	r3, [pc, #140]	; (8000470 <MX_ADC3_Init+0xd8>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003e6:	4b22      	ldr	r3, [pc, #136]	; (8000470 <MX_ADC3_Init+0xd8>)
 80003e8:	2201      	movs	r2, #1
 80003ea:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003ec:	4b20      	ldr	r3, [pc, #128]	; (8000470 <MX_ADC3_Init+0xd8>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80003f2:	4b1f      	ldr	r3, [pc, #124]	; (8000470 <MX_ADC3_Init+0xd8>)
 80003f4:	2201      	movs	r2, #1
 80003f6:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80003f8:	4b1d      	ldr	r3, [pc, #116]	; (8000470 <MX_ADC3_Init+0xd8>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000400:	4b1b      	ldr	r3, [pc, #108]	; (8000470 <MX_ADC3_Init+0xd8>)
 8000402:	2204      	movs	r2, #4
 8000404:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000406:	4b1a      	ldr	r3, [pc, #104]	; (8000470 <MX_ADC3_Init+0xd8>)
 8000408:	2200      	movs	r2, #0
 800040a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800040c:	4b18      	ldr	r3, [pc, #96]	; (8000470 <MX_ADC3_Init+0xd8>)
 800040e:	2200      	movs	r2, #0
 8000410:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000412:	4817      	ldr	r0, [pc, #92]	; (8000470 <MX_ADC3_Init+0xd8>)
 8000414:	f000 fe84 	bl	8001120 <HAL_ADC_Init>
 8000418:	4603      	mov	r3, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d001      	beq.n	8000422 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 800041e:	f000 fafd 	bl	8000a1c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000422:	2300      	movs	r3, #0
 8000424:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000426:	f107 031c 	add.w	r3, r7, #28
 800042a:	4619      	mov	r1, r3
 800042c:	4810      	ldr	r0, [pc, #64]	; (8000470 <MX_ADC3_Init+0xd8>)
 800042e:	f001 fb41 	bl	8001ab4 <HAL_ADCEx_MultiModeConfigChannel>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 8000438:	f000 faf0 	bl	8000a1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800043c:	2301      	movs	r3, #1
 800043e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000440:	2301      	movs	r3, #1
 8000442:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000444:	2300      	movs	r3, #0
 8000446:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000448:	2300      	movs	r3, #0
 800044a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000450:	2300      	movs	r3, #0
 8000452:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000454:	1d3b      	adds	r3, r7, #4
 8000456:	4619      	mov	r1, r3
 8000458:	4805      	ldr	r0, [pc, #20]	; (8000470 <MX_ADC3_Init+0xd8>)
 800045a:	f001 f841 	bl	80014e0 <HAL_ADC_ConfigChannel>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 8000464:	f000 fada 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000468:	bf00      	nop
 800046a:	3728      	adds	r7, #40	; 0x28
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	20000078 	.word	0x20000078
 8000474:	50000400 	.word	0x50000400

08000478 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b086      	sub	sp, #24
 800047c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800047e:	463b      	mov	r3, r7
 8000480:	2200      	movs	r2, #0
 8000482:	601a      	str	r2, [r3, #0]
 8000484:	605a      	str	r2, [r3, #4]
 8000486:	609a      	str	r2, [r3, #8]
 8000488:	60da      	str	r2, [r3, #12]
 800048a:	611a      	str	r2, [r3, #16]
 800048c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800048e:	4b27      	ldr	r3, [pc, #156]	; (800052c <MX_ADC4_Init+0xb4>)
 8000490:	4a27      	ldr	r2, [pc, #156]	; (8000530 <MX_ADC4_Init+0xb8>)
 8000492:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000494:	4b25      	ldr	r3, [pc, #148]	; (800052c <MX_ADC4_Init+0xb4>)
 8000496:	2200      	movs	r2, #0
 8000498:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800049a:	4b24      	ldr	r3, [pc, #144]	; (800052c <MX_ADC4_Init+0xb4>)
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80004a0:	4b22      	ldr	r3, [pc, #136]	; (800052c <MX_ADC4_Init+0xb4>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 80004a6:	4b21      	ldr	r3, [pc, #132]	; (800052c <MX_ADC4_Init+0xb4>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80004ac:	4b1f      	ldr	r3, [pc, #124]	; (800052c <MX_ADC4_Init+0xb4>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004b4:	4b1d      	ldr	r3, [pc, #116]	; (800052c <MX_ADC4_Init+0xb4>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004ba:	4b1c      	ldr	r3, [pc, #112]	; (800052c <MX_ADC4_Init+0xb4>)
 80004bc:	2201      	movs	r2, #1
 80004be:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004c0:	4b1a      	ldr	r3, [pc, #104]	; (800052c <MX_ADC4_Init+0xb4>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 80004c6:	4b19      	ldr	r3, [pc, #100]	; (800052c <MX_ADC4_Init+0xb4>)
 80004c8:	2201      	movs	r2, #1
 80004ca:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80004cc:	4b17      	ldr	r3, [pc, #92]	; (800052c <MX_ADC4_Init+0xb4>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004d4:	4b15      	ldr	r3, [pc, #84]	; (800052c <MX_ADC4_Init+0xb4>)
 80004d6:	2204      	movs	r2, #4
 80004d8:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80004da:	4b14      	ldr	r3, [pc, #80]	; (800052c <MX_ADC4_Init+0xb4>)
 80004dc:	2200      	movs	r2, #0
 80004de:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80004e0:	4b12      	ldr	r3, [pc, #72]	; (800052c <MX_ADC4_Init+0xb4>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80004e6:	4811      	ldr	r0, [pc, #68]	; (800052c <MX_ADC4_Init+0xb4>)
 80004e8:	f000 fe1a 	bl	8001120 <HAL_ADC_Init>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_ADC4_Init+0x7e>
  {
    Error_Handler();
 80004f2:	f000 fa93 	bl	8000a1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80004f6:	2303      	movs	r3, #3
 80004f8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004fa:	2301      	movs	r3, #1
 80004fc:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004fe:	2300      	movs	r3, #0
 8000500:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000502:	2300      	movs	r3, #0
 8000504:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000506:	2300      	movs	r3, #0
 8000508:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800050a:	2300      	movs	r3, #0
 800050c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 800050e:	463b      	mov	r3, r7
 8000510:	4619      	mov	r1, r3
 8000512:	4806      	ldr	r0, [pc, #24]	; (800052c <MX_ADC4_Init+0xb4>)
 8000514:	f000 ffe4 	bl	80014e0 <HAL_ADC_ConfigChannel>
 8000518:	4603      	mov	r3, r0
 800051a:	2b00      	cmp	r3, #0
 800051c:	d001      	beq.n	8000522 <MX_ADC4_Init+0xaa>
  {
    Error_Handler();
 800051e:	f000 fa7d 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000522:	bf00      	nop
 8000524:	3718      	adds	r7, #24
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	200000c8 	.word	0x200000c8
 8000530:	50000500 	.word	0x50000500

08000534 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 8000538:	4b16      	ldr	r3, [pc, #88]	; (8000594 <MX_CAN_Init+0x60>)
 800053a:	4a17      	ldr	r2, [pc, #92]	; (8000598 <MX_CAN_Init+0x64>)
 800053c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <MX_CAN_Init+0x60>)
 8000540:	2210      	movs	r2, #16
 8000542:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000544:	4b13      	ldr	r3, [pc, #76]	; (8000594 <MX_CAN_Init+0x60>)
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800054a:	4b12      	ldr	r3, [pc, #72]	; (8000594 <MX_CAN_Init+0x60>)
 800054c:	2200      	movs	r2, #0
 800054e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000550:	4b10      	ldr	r3, [pc, #64]	; (8000594 <MX_CAN_Init+0x60>)
 8000552:	2200      	movs	r2, #0
 8000554:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000556:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <MX_CAN_Init+0x60>)
 8000558:	2200      	movs	r2, #0
 800055a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800055c:	4b0d      	ldr	r3, [pc, #52]	; (8000594 <MX_CAN_Init+0x60>)
 800055e:	2200      	movs	r2, #0
 8000560:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000562:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <MX_CAN_Init+0x60>)
 8000564:	2200      	movs	r2, #0
 8000566:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000568:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <MX_CAN_Init+0x60>)
 800056a:	2200      	movs	r2, #0
 800056c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800056e:	4b09      	ldr	r3, [pc, #36]	; (8000594 <MX_CAN_Init+0x60>)
 8000570:	2200      	movs	r2, #0
 8000572:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <MX_CAN_Init+0x60>)
 8000576:	2200      	movs	r2, #0
 8000578:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <MX_CAN_Init+0x60>)
 800057c:	2200      	movs	r2, #0
 800057e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000580:	4804      	ldr	r0, [pc, #16]	; (8000594 <MX_CAN_Init+0x60>)
 8000582:	f001 fbef 	bl	8001d64 <HAL_CAN_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800058c:	f000 fa46 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	20000118 	.word	0x20000118
 8000598:	40006400 	.word	0x40006400

0800059c <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005a2:	1d3b      	adds	r3, r7, #4
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80005ac:	4b14      	ldr	r3, [pc, #80]	; (8000600 <MX_DAC_Init+0x64>)
 80005ae:	4a15      	ldr	r2, [pc, #84]	; (8000604 <MX_DAC_Init+0x68>)
 80005b0:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80005b2:	4813      	ldr	r0, [pc, #76]	; (8000600 <MX_DAC_Init+0x64>)
 80005b4:	f001 fdb7 	bl	8002126 <HAL_DAC_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_DAC_Init+0x26>
  {
    Error_Handler();
 80005be:	f000 fa2d 	bl	8000a1c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	4619      	mov	r1, r3
 80005d0:	480b      	ldr	r0, [pc, #44]	; (8000600 <MX_DAC_Init+0x64>)
 80005d2:	f001 fdca 	bl	800216a <HAL_DAC_ConfigChannel>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 80005dc:	f000 fa1e 	bl	8000a1c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2210      	movs	r2, #16
 80005e4:	4619      	mov	r1, r3
 80005e6:	4806      	ldr	r0, [pc, #24]	; (8000600 <MX_DAC_Init+0x64>)
 80005e8:	f001 fdbf 	bl	800216a <HAL_DAC_ConfigChannel>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <MX_DAC_Init+0x5a>
  {
    Error_Handler();
 80005f2:	f000 fa13 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80005f6:	bf00      	nop
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	20000140 	.word	0x20000140
 8000604:	40007400 	.word	0x40007400

08000608 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <MX_I2C1_Init+0x74>)
 800060e:	4a1c      	ldr	r2, [pc, #112]	; (8000680 <MX_I2C1_Init+0x78>)
 8000610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000612:	4b1a      	ldr	r3, [pc, #104]	; (800067c <MX_I2C1_Init+0x74>)
 8000614:	4a1b      	ldr	r2, [pc, #108]	; (8000684 <MX_I2C1_Init+0x7c>)
 8000616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000618:	4b18      	ldr	r3, [pc, #96]	; (800067c <MX_I2C1_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800061e:	4b17      	ldr	r3, [pc, #92]	; (800067c <MX_I2C1_Init+0x74>)
 8000620:	2201      	movs	r2, #1
 8000622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000624:	4b15      	ldr	r3, [pc, #84]	; (800067c <MX_I2C1_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800062a:	4b14      	ldr	r3, [pc, #80]	; (800067c <MX_I2C1_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000630:	4b12      	ldr	r3, [pc, #72]	; (800067c <MX_I2C1_Init+0x74>)
 8000632:	2200      	movs	r2, #0
 8000634:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000636:	4b11      	ldr	r3, [pc, #68]	; (800067c <MX_I2C1_Init+0x74>)
 8000638:	2200      	movs	r2, #0
 800063a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063c:	4b0f      	ldr	r3, [pc, #60]	; (800067c <MX_I2C1_Init+0x74>)
 800063e:	2200      	movs	r2, #0
 8000640:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000642:	480e      	ldr	r0, [pc, #56]	; (800067c <MX_I2C1_Init+0x74>)
 8000644:	f001 ff70 	bl	8002528 <HAL_I2C_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800064e:	f000 f9e5 	bl	8000a1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000652:	2100      	movs	r1, #0
 8000654:	4809      	ldr	r0, [pc, #36]	; (800067c <MX_I2C1_Init+0x74>)
 8000656:	f002 f802 	bl	800265e <HAL_I2CEx_ConfigAnalogFilter>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000660:	f000 f9dc 	bl	8000a1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000664:	2100      	movs	r1, #0
 8000666:	4805      	ldr	r0, [pc, #20]	; (800067c <MX_I2C1_Init+0x74>)
 8000668:	f002 f844 	bl	80026f4 <HAL_I2CEx_ConfigDigitalFilter>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000672:	f000 f9d3 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000154 	.word	0x20000154
 8000680:	40005400 	.word	0x40005400
 8000684:	2000090e 	.word	0x2000090e

08000688 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800068c:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <MX_SPI1_Init+0x74>)
 800068e:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <MX_SPI1_Init+0x78>)
 8000690:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000692:	4b1a      	ldr	r3, [pc, #104]	; (80006fc <MX_SPI1_Init+0x74>)
 8000694:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000698:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800069a:	4b18      	ldr	r3, [pc, #96]	; (80006fc <MX_SPI1_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80006a0:	4b16      	ldr	r3, [pc, #88]	; (80006fc <MX_SPI1_Init+0x74>)
 80006a2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80006a6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006a8:	4b14      	ldr	r3, [pc, #80]	; (80006fc <MX_SPI1_Init+0x74>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006ae:	4b13      	ldr	r3, [pc, #76]	; (80006fc <MX_SPI1_Init+0x74>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_SPI1_Init+0x74>)
 80006b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006ba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80006bc:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_SPI1_Init+0x74>)
 80006be:	2210      	movs	r2, #16
 80006c0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_SPI1_Init+0x74>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_SPI1_Init+0x74>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_SPI1_Init+0x74>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_SPI1_Init+0x74>)
 80006d6:	2207      	movs	r2, #7
 80006d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <MX_SPI1_Init+0x74>)
 80006dc:	2200      	movs	r2, #0
 80006de:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_SPI1_Init+0x74>)
 80006e2:	2208      	movs	r2, #8
 80006e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_SPI1_Init+0x74>)
 80006e8:	f003 fc0e 	bl	8003f08 <HAL_SPI_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006f2:	f000 f993 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200001a8 	.word	0x200001a8
 8000700:	40013000 	.word	0x40013000

08000704 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08e      	sub	sp, #56	; 0x38
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800070a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000724:	463b      	mov	r3, r7
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
 8000732:	615a      	str	r2, [r3, #20]
 8000734:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000736:	4b38      	ldr	r3, [pc, #224]	; (8000818 <MX_TIM2_Init+0x114>)
 8000738:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800073c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400-1;
 800073e:	4b36      	ldr	r3, [pc, #216]	; (8000818 <MX_TIM2_Init+0x114>)
 8000740:	f641 02ff 	movw	r2, #6399	; 0x18ff
 8000744:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000746:	4b34      	ldr	r3, [pc, #208]	; (8000818 <MX_TIM2_Init+0x114>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800074c:	4b32      	ldr	r3, [pc, #200]	; (8000818 <MX_TIM2_Init+0x114>)
 800074e:	2263      	movs	r2, #99	; 0x63
 8000750:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000752:	4b31      	ldr	r3, [pc, #196]	; (8000818 <MX_TIM2_Init+0x114>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000758:	4b2f      	ldr	r3, [pc, #188]	; (8000818 <MX_TIM2_Init+0x114>)
 800075a:	2200      	movs	r2, #0
 800075c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800075e:	482e      	ldr	r0, [pc, #184]	; (8000818 <MX_TIM2_Init+0x114>)
 8000760:	f003 fc7d 	bl	800405e <HAL_TIM_Base_Init>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800076a:	f000 f957 	bl	8000a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800076e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000772:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000774:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000778:	4619      	mov	r1, r3
 800077a:	4827      	ldr	r0, [pc, #156]	; (8000818 <MX_TIM2_Init+0x114>)
 800077c:	f003 fe3c 	bl	80043f8 <HAL_TIM_ConfigClockSource>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000786:	f000 f949 	bl	8000a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800078a:	4823      	ldr	r0, [pc, #140]	; (8000818 <MX_TIM2_Init+0x114>)
 800078c:	f003 fcbe 	bl	800410c <HAL_TIM_PWM_Init>
 8000790:	4603      	mov	r3, r0
 8000792:	2b00      	cmp	r3, #0
 8000794:	d001      	beq.n	800079a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000796:	f000 f941 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007a2:	f107 031c 	add.w	r3, r7, #28
 80007a6:	4619      	mov	r1, r3
 80007a8:	481b      	ldr	r0, [pc, #108]	; (8000818 <MX_TIM2_Init+0x114>)
 80007aa:	f004 fafb 	bl	8004da4 <HAL_TIMEx_MasterConfigSynchronization>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80007b4:	f000 f932 	bl	8000a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007b8:	2360      	movs	r3, #96	; 0x60
 80007ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007bc:	2300      	movs	r3, #0
 80007be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c4:	2300      	movs	r3, #0
 80007c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007c8:	463b      	mov	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	4619      	mov	r1, r3
 80007ce:	4812      	ldr	r0, [pc, #72]	; (8000818 <MX_TIM2_Init+0x114>)
 80007d0:	f003 fcfe 	bl	80041d0 <HAL_TIM_PWM_ConfigChannel>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80007da:	f000 f91f 	bl	8000a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007de:	463b      	mov	r3, r7
 80007e0:	2208      	movs	r2, #8
 80007e2:	4619      	mov	r1, r3
 80007e4:	480c      	ldr	r0, [pc, #48]	; (8000818 <MX_TIM2_Init+0x114>)
 80007e6:	f003 fcf3 	bl	80041d0 <HAL_TIM_PWM_ConfigChannel>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80007f0:	f000 f914 	bl	8000a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80007f4:	463b      	mov	r3, r7
 80007f6:	220c      	movs	r2, #12
 80007f8:	4619      	mov	r1, r3
 80007fa:	4807      	ldr	r0, [pc, #28]	; (8000818 <MX_TIM2_Init+0x114>)
 80007fc:	f003 fce8 	bl	80041d0 <HAL_TIM_PWM_ConfigChannel>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000806:	f000 f909 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800080a:	4803      	ldr	r0, [pc, #12]	; (8000818 <MX_TIM2_Init+0x114>)
 800080c:	f000 fb34 	bl	8000e78 <HAL_TIM_MspPostInit>

}
 8000810:	bf00      	nop
 8000812:	3738      	adds	r7, #56	; 0x38
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	2000020c 	.word	0x2000020c

0800081c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08e      	sub	sp, #56	; 0x38
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000822:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800083c:	463b      	mov	r3, r7
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
 800084a:	615a      	str	r2, [r3, #20]
 800084c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800084e:	4b38      	ldr	r3, [pc, #224]	; (8000930 <MX_TIM3_Init+0x114>)
 8000850:	4a38      	ldr	r2, [pc, #224]	; (8000934 <MX_TIM3_Init+0x118>)
 8000852:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6400-1;
 8000854:	4b36      	ldr	r3, [pc, #216]	; (8000930 <MX_TIM3_Init+0x114>)
 8000856:	f641 02ff 	movw	r2, #6399	; 0x18ff
 800085a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085c:	4b34      	ldr	r3, [pc, #208]	; (8000930 <MX_TIM3_Init+0x114>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8000862:	4b33      	ldr	r3, [pc, #204]	; (8000930 <MX_TIM3_Init+0x114>)
 8000864:	2263      	movs	r2, #99	; 0x63
 8000866:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000868:	4b31      	ldr	r3, [pc, #196]	; (8000930 <MX_TIM3_Init+0x114>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086e:	4b30      	ldr	r3, [pc, #192]	; (8000930 <MX_TIM3_Init+0x114>)
 8000870:	2200      	movs	r2, #0
 8000872:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000874:	482e      	ldr	r0, [pc, #184]	; (8000930 <MX_TIM3_Init+0x114>)
 8000876:	f003 fbf2 	bl	800405e <HAL_TIM_Base_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000880:	f000 f8cc 	bl	8000a1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000884:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000888:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800088a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800088e:	4619      	mov	r1, r3
 8000890:	4827      	ldr	r0, [pc, #156]	; (8000930 <MX_TIM3_Init+0x114>)
 8000892:	f003 fdb1 	bl	80043f8 <HAL_TIM_ConfigClockSource>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 800089c:	f000 f8be 	bl	8000a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80008a0:	4823      	ldr	r0, [pc, #140]	; (8000930 <MX_TIM3_Init+0x114>)
 80008a2:	f003 fc33 	bl	800410c <HAL_TIM_PWM_Init>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80008ac:	f000 f8b6 	bl	8000a1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	481c      	ldr	r0, [pc, #112]	; (8000930 <MX_TIM3_Init+0x114>)
 80008c0:	f004 fa70 	bl	8004da4 <HAL_TIMEx_MasterConfigSynchronization>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80008ca:	f000 f8a7 	bl	8000a1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008ce:	2360      	movs	r3, #96	; 0x60
 80008d0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008de:	463b      	mov	r3, r7
 80008e0:	2200      	movs	r2, #0
 80008e2:	4619      	mov	r1, r3
 80008e4:	4812      	ldr	r0, [pc, #72]	; (8000930 <MX_TIM3_Init+0x114>)
 80008e6:	f003 fc73 	bl	80041d0 <HAL_TIM_PWM_ConfigChannel>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80008f0:	f000 f894 	bl	8000a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008f4:	463b      	mov	r3, r7
 80008f6:	2204      	movs	r2, #4
 80008f8:	4619      	mov	r1, r3
 80008fa:	480d      	ldr	r0, [pc, #52]	; (8000930 <MX_TIM3_Init+0x114>)
 80008fc:	f003 fc68 	bl	80041d0 <HAL_TIM_PWM_ConfigChannel>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8000906:	f000 f889 	bl	8000a1c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800090a:	463b      	mov	r3, r7
 800090c:	220c      	movs	r2, #12
 800090e:	4619      	mov	r1, r3
 8000910:	4807      	ldr	r0, [pc, #28]	; (8000930 <MX_TIM3_Init+0x114>)
 8000912:	f003 fc5d 	bl	80041d0 <HAL_TIM_PWM_ConfigChannel>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 800091c:	f000 f87e 	bl	8000a1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000920:	4803      	ldr	r0, [pc, #12]	; (8000930 <MX_TIM3_Init+0x114>)
 8000922:	f000 faa9 	bl	8000e78 <HAL_TIM_MspPostInit>

}
 8000926:	bf00      	nop
 8000928:	3738      	adds	r7, #56	; 0x38
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000258 	.word	0x20000258
 8000934:	40000400 	.word	0x40000400

08000938 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800093e:	f107 030c 	add.w	r3, r7, #12
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
 800094c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800094e:	4b30      	ldr	r3, [pc, #192]	; (8000a10 <MX_GPIO_Init+0xd8>)
 8000950:	695b      	ldr	r3, [r3, #20]
 8000952:	4a2f      	ldr	r2, [pc, #188]	; (8000a10 <MX_GPIO_Init+0xd8>)
 8000954:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000958:	6153      	str	r3, [r2, #20]
 800095a:	4b2d      	ldr	r3, [pc, #180]	; (8000a10 <MX_GPIO_Init+0xd8>)
 800095c:	695b      	ldr	r3, [r3, #20]
 800095e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000966:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <MX_GPIO_Init+0xd8>)
 8000968:	695b      	ldr	r3, [r3, #20]
 800096a:	4a29      	ldr	r2, [pc, #164]	; (8000a10 <MX_GPIO_Init+0xd8>)
 800096c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000970:	6153      	str	r3, [r2, #20]
 8000972:	4b27      	ldr	r3, [pc, #156]	; (8000a10 <MX_GPIO_Init+0xd8>)
 8000974:	695b      	ldr	r3, [r3, #20]
 8000976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800097a:	607b      	str	r3, [r7, #4]
 800097c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800097e:	4b24      	ldr	r3, [pc, #144]	; (8000a10 <MX_GPIO_Init+0xd8>)
 8000980:	695b      	ldr	r3, [r3, #20]
 8000982:	4a23      	ldr	r2, [pc, #140]	; (8000a10 <MX_GPIO_Init+0xd8>)
 8000984:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000988:	6153      	str	r3, [r2, #20]
 800098a:	4b21      	ldr	r3, [pc, #132]	; (8000a10 <MX_GPIO_Init+0xd8>)
 800098c:	695b      	ldr	r3, [r3, #20]
 800098e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M_PWM_Pin|M_OC_Pin, GPIO_PIN_RESET);
 8000996:	2200      	movs	r2, #0
 8000998:	f248 0104 	movw	r1, #32772	; 0x8004
 800099c:	481d      	ldr	r0, [pc, #116]	; (8000a14 <MX_GPIO_Init+0xdc>)
 800099e:	f001 fdab 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DC_CAL_Pin|EN_GATE_Pin|SPI1_SS_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80009a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009ac:	f001 fda4 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PWRGD_Pin nOCTW_Pin nFAULT_Pin */
  GPIO_InitStruct.Pin = PWRGD_Pin|nOCTW_Pin|nFAULT_Pin;
 80009b0:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80009b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b6:	2300      	movs	r3, #0
 80009b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	4619      	mov	r1, r3
 80009c4:	4814      	ldr	r0, [pc, #80]	; (8000a18 <MX_GPIO_Init+0xe0>)
 80009c6:	f001 fc1d 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pins : M_PWM_Pin M_OC_Pin */
  GPIO_InitStruct.Pin = M_PWM_Pin|M_OC_Pin;
 80009ca:	f248 0304 	movw	r3, #32772	; 0x8004
 80009ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d0:	2301      	movs	r3, #1
 80009d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d8:	2300      	movs	r3, #0
 80009da:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009dc:	f107 030c 	add.w	r3, r7, #12
 80009e0:	4619      	mov	r1, r3
 80009e2:	480c      	ldr	r0, [pc, #48]	; (8000a14 <MX_GPIO_Init+0xdc>)
 80009e4:	f001 fc0e 	bl	8002204 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_CAL_Pin EN_GATE_Pin SPI1_SS_Pin */
  GPIO_InitStruct.Pin = DC_CAL_Pin|EN_GATE_Pin|SPI1_SS_Pin;
 80009e8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80009ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fa:	f107 030c 	add.w	r3, r7, #12
 80009fe:	4619      	mov	r1, r3
 8000a00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a04:	f001 fbfe 	bl	8002204 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a08:	bf00      	nop
 8000a0a:	3720      	adds	r7, #32
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40021000 	.word	0x40021000
 8000a14:	48000400 	.word	0x48000400
 8000a18:	48000800 	.word	0x48000800

08000a1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a20:	b672      	cpsid	i
}
 8000a22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <Error_Handler+0x8>
	...

08000a28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <HAL_MspInit+0x44>)
 8000a30:	699b      	ldr	r3, [r3, #24]
 8000a32:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <HAL_MspInit+0x44>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6193      	str	r3, [r2, #24]
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <HAL_MspInit+0x44>)
 8000a3c:	699b      	ldr	r3, [r3, #24]
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_MspInit+0x44>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_MspInit+0x44>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a50:	61d3      	str	r3, [r2, #28]
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_MspInit+0x44>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000

08000a70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08e      	sub	sp, #56	; 0x38
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a90:	d125      	bne.n	8000ade <HAL_ADC_MspInit+0x6e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000a92:	4b48      	ldr	r3, [pc, #288]	; (8000bb4 <HAL_ADC_MspInit+0x144>)
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	4a47      	ldr	r2, [pc, #284]	; (8000bb4 <HAL_ADC_MspInit+0x144>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6153      	str	r3, [r2, #20]
 8000a9e:	4b45      	ldr	r3, [pc, #276]	; (8000bb4 <HAL_ADC_MspInit+0x144>)
 8000aa0:	695b      	ldr	r3, [r3, #20]
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	623b      	str	r3, [r7, #32]
 8000aa8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aaa:	4b42      	ldr	r3, [pc, #264]	; (8000bb4 <HAL_ADC_MspInit+0x144>)
 8000aac:	695b      	ldr	r3, [r3, #20]
 8000aae:	4a41      	ldr	r2, [pc, #260]	; (8000bb4 <HAL_ADC_MspInit+0x144>)
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	6153      	str	r3, [r2, #20]
 8000ab6:	4b3f      	ldr	r3, [pc, #252]	; (8000bb4 <HAL_ADC_MspInit+0x144>)
 8000ab8:	695b      	ldr	r3, [r3, #20]
 8000aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000abe:	61fb      	str	r3, [r7, #28]
 8000ac0:	69fb      	ldr	r3, [r7, #28]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = INLINE_B_Pin|INLINE_A_Pin|PVDDSENSE_Pin|INH_C_Pin;
 8000ac2:	230f      	movs	r3, #15
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ac6:	2303      	movs	r3, #3
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ace:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ad8:	f001 fb94 	bl	8002204 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8000adc:	e066      	b.n	8000bac <HAL_ADC_MspInit+0x13c>
  else if(hadc->Instance==ADC3)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a35      	ldr	r2, [pc, #212]	; (8000bb8 <HAL_ADC_MspInit+0x148>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d12e      	bne.n	8000b46 <HAL_ADC_MspInit+0xd6>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8000ae8:	4b34      	ldr	r3, [pc, #208]	; (8000bbc <HAL_ADC_MspInit+0x14c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	3301      	adds	r3, #1
 8000aee:	4a33      	ldr	r2, [pc, #204]	; (8000bbc <HAL_ADC_MspInit+0x14c>)
 8000af0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8000af2:	4b32      	ldr	r3, [pc, #200]	; (8000bbc <HAL_ADC_MspInit+0x14c>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	2b01      	cmp	r3, #1
 8000af8:	d10b      	bne.n	8000b12 <HAL_ADC_MspInit+0xa2>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8000afa:	4b2e      	ldr	r3, [pc, #184]	; (8000bb4 <HAL_ADC_MspInit+0x144>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	4a2d      	ldr	r2, [pc, #180]	; (8000bb4 <HAL_ADC_MspInit+0x144>)
 8000b00:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b04:	6153      	str	r3, [r2, #20]
 8000b06:	4b2b      	ldr	r3, [pc, #172]	; (8000bb4 <HAL_ADC_MspInit+0x144>)
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b0e:	61bb      	str	r3, [r7, #24]
 8000b10:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	4b28      	ldr	r3, [pc, #160]	; (8000bb4 <HAL_ADC_MspInit+0x144>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	4a27      	ldr	r2, [pc, #156]	; (8000bb4 <HAL_ADC_MspInit+0x144>)
 8000b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b1c:	6153      	str	r3, [r2, #20]
 8000b1e:	4b25      	ldr	r3, [pc, #148]	; (8000bb4 <HAL_ADC_MspInit+0x144>)
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ASENSE_V_Pin|BSENSE_V_Pin|CSENSE_V_Pin;
 8000b2a:	f242 0303 	movw	r3, #8195	; 0x2003
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b30:	2303      	movs	r3, #3
 8000b32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	4820      	ldr	r0, [pc, #128]	; (8000bc0 <HAL_ADC_MspInit+0x150>)
 8000b40:	f001 fb60 	bl	8002204 <HAL_GPIO_Init>
}
 8000b44:	e032      	b.n	8000bac <HAL_ADC_MspInit+0x13c>
  else if(hadc->Instance==ADC4)
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a1e      	ldr	r2, [pc, #120]	; (8000bc4 <HAL_ADC_MspInit+0x154>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d12d      	bne.n	8000bac <HAL_ADC_MspInit+0x13c>
    HAL_RCC_ADC34_CLK_ENABLED++;
 8000b50:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <HAL_ADC_MspInit+0x14c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	3301      	adds	r3, #1
 8000b56:	4a19      	ldr	r2, [pc, #100]	; (8000bbc <HAL_ADC_MspInit+0x14c>)
 8000b58:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <HAL_ADC_MspInit+0x14c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d10b      	bne.n	8000b7a <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <HAL_ADC_MspInit+0x144>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	4a13      	ldr	r2, [pc, #76]	; (8000bb4 <HAL_ADC_MspInit+0x144>)
 8000b68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b6c:	6153      	str	r3, [r2, #20]
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <HAL_ADC_MspInit+0x144>)
 8000b70:	695b      	ldr	r3, [r3, #20]
 8000b72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <HAL_ADC_MspInit+0x144>)
 8000b7c:	695b      	ldr	r3, [r3, #20]
 8000b7e:	4a0d      	ldr	r2, [pc, #52]	; (8000bb4 <HAL_ADC_MspInit+0x144>)
 8000b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b84:	6153      	str	r3, [r2, #20]
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <HAL_ADC_MspInit+0x144>)
 8000b88:	695b      	ldr	r3, [r3, #20]
 8000b8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b8e:	60fb      	str	r3, [r7, #12]
 8000b90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = S02_Pin|S01_Pin;
 8000b92:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4806      	ldr	r0, [pc, #24]	; (8000bc0 <HAL_ADC_MspInit+0x150>)
 8000ba8:	f001 fb2c 	bl	8002204 <HAL_GPIO_Init>
}
 8000bac:	bf00      	nop
 8000bae:	3738      	adds	r7, #56	; 0x38
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	50000400 	.word	0x50000400
 8000bbc:	200002a4 	.word	0x200002a4
 8000bc0:	48000400 	.word	0x48000400
 8000bc4:	50000500 	.word	0x50000500

08000bc8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b08a      	sub	sp, #40	; 0x28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd0:	f107 0314 	add.w	r3, r7, #20
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <HAL_CAN_MspInit+0x80>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d129      	bne.n	8000c3e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000bea:	4b18      	ldr	r3, [pc, #96]	; (8000c4c <HAL_CAN_MspInit+0x84>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	4a17      	ldr	r2, [pc, #92]	; (8000c4c <HAL_CAN_MspInit+0x84>)
 8000bf0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bf4:	61d3      	str	r3, [r2, #28]
 8000bf6:	4b15      	ldr	r3, [pc, #84]	; (8000c4c <HAL_CAN_MspInit+0x84>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_CAN_MspInit+0x84>)
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	4a11      	ldr	r2, [pc, #68]	; (8000c4c <HAL_CAN_MspInit+0x84>)
 8000c08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0c:	6153      	str	r3, [r2, #20]
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <HAL_CAN_MspInit+0x84>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c28:	2303      	movs	r3, #3
 8000c2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN;
 8000c2c:	2309      	movs	r3, #9
 8000c2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c30:	f107 0314 	add.w	r3, r7, #20
 8000c34:	4619      	mov	r1, r3
 8000c36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c3a:	f001 fae3 	bl	8002204 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8000c3e:	bf00      	nop
 8000c40:	3728      	adds	r7, #40	; 0x28
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	40006400 	.word	0x40006400
 8000c4c:	40021000 	.word	0x40021000

08000c50 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a15      	ldr	r2, [pc, #84]	; (8000cc4 <HAL_DAC_MspInit+0x74>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d124      	bne.n	8000cbc <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <HAL_DAC_MspInit+0x78>)
 8000c74:	69db      	ldr	r3, [r3, #28]
 8000c76:	4a14      	ldr	r2, [pc, #80]	; (8000cc8 <HAL_DAC_MspInit+0x78>)
 8000c78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c7c:	61d3      	str	r3, [r2, #28]
 8000c7e:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_DAC_MspInit+0x78>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c86:	613b      	str	r3, [r7, #16]
 8000c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <HAL_DAC_MspInit+0x78>)
 8000c8c:	695b      	ldr	r3, [r3, #20]
 8000c8e:	4a0e      	ldr	r2, [pc, #56]	; (8000cc8 <HAL_DAC_MspInit+0x78>)
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c94:	6153      	str	r3, [r2, #20]
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <HAL_DAC_MspInit+0x78>)
 8000c98:	695b      	ldr	r3, [r3, #20]
 8000c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c9e:	60fb      	str	r3, [r7, #12]
 8000ca0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = VREF_Pin|PROTEC_REF_Pin;
 8000ca2:	2330      	movs	r3, #48	; 0x30
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ca6:	2303      	movs	r3, #3
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb8:	f001 faa4 	bl	8002204 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000cbc:	bf00      	nop
 8000cbe:	3728      	adds	r7, #40	; 0x28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40007400 	.word	0x40007400
 8000cc8:	40021000 	.word	0x40021000

08000ccc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd4:	f107 0314 	add.w	r3, r7, #20
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a17      	ldr	r2, [pc, #92]	; (8000d48 <HAL_I2C_MspInit+0x7c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d128      	bne.n	8000d40 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <HAL_I2C_MspInit+0x80>)
 8000cf0:	695b      	ldr	r3, [r3, #20]
 8000cf2:	4a16      	ldr	r2, [pc, #88]	; (8000d4c <HAL_I2C_MspInit+0x80>)
 8000cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cf8:	6153      	str	r3, [r2, #20]
 8000cfa:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <HAL_I2C_MspInit+0x80>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000d06:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000d0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d0c:	2312      	movs	r3, #18
 8000d0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d14:	2303      	movs	r3, #3
 8000d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d18:	2304      	movs	r3, #4
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	4619      	mov	r1, r3
 8000d22:	480b      	ldr	r0, [pc, #44]	; (8000d50 <HAL_I2C_MspInit+0x84>)
 8000d24:	f001 fa6e 	bl	8002204 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <HAL_I2C_MspInit+0x80>)
 8000d2a:	69db      	ldr	r3, [r3, #28]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	; (8000d4c <HAL_I2C_MspInit+0x80>)
 8000d2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d32:	61d3      	str	r3, [r2, #28]
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <HAL_I2C_MspInit+0x80>)
 8000d36:	69db      	ldr	r3, [r3, #28]
 8000d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d40:	bf00      	nop
 8000d42:	3728      	adds	r7, #40	; 0x28
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40005400 	.word	0x40005400
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	48000400 	.word	0x48000400

08000d54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a25      	ldr	r2, [pc, #148]	; (8000e08 <HAL_SPI_MspInit+0xb4>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d144      	bne.n	8000e00 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d76:	4b25      	ldr	r3, [pc, #148]	; (8000e0c <HAL_SPI_MspInit+0xb8>)
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	4a24      	ldr	r2, [pc, #144]	; (8000e0c <HAL_SPI_MspInit+0xb8>)
 8000d7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d80:	6193      	str	r3, [r2, #24]
 8000d82:	4b22      	ldr	r3, [pc, #136]	; (8000e0c <HAL_SPI_MspInit+0xb8>)
 8000d84:	699b      	ldr	r3, [r3, #24]
 8000d86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b1f      	ldr	r3, [pc, #124]	; (8000e0c <HAL_SPI_MspInit+0xb8>)
 8000d90:	695b      	ldr	r3, [r3, #20]
 8000d92:	4a1e      	ldr	r2, [pc, #120]	; (8000e0c <HAL_SPI_MspInit+0xb8>)
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d98:	6153      	str	r3, [r2, #20]
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <HAL_SPI_MspInit+0xb8>)
 8000d9c:	695b      	ldr	r3, [r3, #20]
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	4b19      	ldr	r3, [pc, #100]	; (8000e0c <HAL_SPI_MspInit+0xb8>)
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	4a18      	ldr	r2, [pc, #96]	; (8000e0c <HAL_SPI_MspInit+0xb8>)
 8000dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000db0:	6153      	str	r3, [r2, #20]
 8000db2:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <HAL_SPI_MspInit+0xb8>)
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dbe:	23c0      	movs	r3, #192	; 0xc0
 8000dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dce:	2305      	movs	r3, #5
 8000dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd2:	f107 0314 	add.w	r3, r7, #20
 8000dd6:	4619      	mov	r1, r3
 8000dd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ddc:	f001 fa12 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000de0:	2308      	movs	r3, #8
 8000de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	2302      	movs	r3, #2
 8000de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dec:	2303      	movs	r3, #3
 8000dee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000df0:	2305      	movs	r3, #5
 8000df2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <HAL_SPI_MspInit+0xbc>)
 8000dfc:	f001 fa02 	bl	8002204 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e00:	bf00      	nop
 8000e02:	3728      	adds	r7, #40	; 0x28
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	40013000 	.word	0x40013000
 8000e0c:	40021000 	.word	0x40021000
 8000e10:	48000400 	.word	0x48000400

08000e14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e24:	d10c      	bne.n	8000e40 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e26:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <HAL_TIM_Base_MspInit+0x5c>)
 8000e28:	69db      	ldr	r3, [r3, #28]
 8000e2a:	4a11      	ldr	r2, [pc, #68]	; (8000e70 <HAL_TIM_Base_MspInit+0x5c>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	61d3      	str	r3, [r2, #28]
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <HAL_TIM_Base_MspInit+0x5c>)
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e3e:	e010      	b.n	8000e62 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM3)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a0b      	ldr	r2, [pc, #44]	; (8000e74 <HAL_TIM_Base_MspInit+0x60>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d10b      	bne.n	8000e62 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_TIM_Base_MspInit+0x5c>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	4a08      	ldr	r2, [pc, #32]	; (8000e70 <HAL_TIM_Base_MspInit+0x5c>)
 8000e50:	f043 0302 	orr.w	r3, r3, #2
 8000e54:	61d3      	str	r3, [r2, #28]
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_TIM_Base_MspInit+0x5c>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
}
 8000e62:	bf00      	nop
 8000e64:	3714      	adds	r7, #20
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40021000 	.word	0x40021000
 8000e74:	40000400 	.word	0x40000400

08000e78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	; 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e98:	d13b      	bne.n	8000f12 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	4b38      	ldr	r3, [pc, #224]	; (8000f7c <HAL_TIM_MspPostInit+0x104>)
 8000e9c:	695b      	ldr	r3, [r3, #20]
 8000e9e:	4a37      	ldr	r2, [pc, #220]	; (8000f7c <HAL_TIM_MspPostInit+0x104>)
 8000ea0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ea4:	6153      	str	r3, [r2, #20]
 8000ea6:	4b35      	ldr	r3, [pc, #212]	; (8000f7c <HAL_TIM_MspPostInit+0x104>)
 8000ea8:	695b      	ldr	r3, [r3, #20]
 8000eaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000eae:	613b      	str	r3, [r7, #16]
 8000eb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb2:	4b32      	ldr	r3, [pc, #200]	; (8000f7c <HAL_TIM_MspPostInit+0x104>)
 8000eb4:	695b      	ldr	r3, [r3, #20]
 8000eb6:	4a31      	ldr	r2, [pc, #196]	; (8000f7c <HAL_TIM_MspPostInit+0x104>)
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ebc:	6153      	str	r3, [r2, #20]
 8000ebe:	4b2f      	ldr	r3, [pc, #188]	; (8000f7c <HAL_TIM_MspPostInit+0x104>)
 8000ec0:	695b      	ldr	r3, [r3, #20]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = INH_B_Pin|THERMISTOR_Pin;
 8000eca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000edc:	2301      	movs	r3, #1
 8000ede:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee0:	f107 0314 	add.w	r3, r7, #20
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	4826      	ldr	r0, [pc, #152]	; (8000f80 <HAL_TIM_MspPostInit+0x108>)
 8000ee8:	f001 f98c 	bl	8002204 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = INL_C_Pin;
 8000eec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efa:	2300      	movs	r3, #0
 8000efc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000efe:	2301      	movs	r3, #1
 8000f00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(INL_C_GPIO_Port, &GPIO_InitStruct);
 8000f02:	f107 0314 	add.w	r3, r7, #20
 8000f06:	4619      	mov	r1, r3
 8000f08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0c:	f001 f97a 	bl	8002204 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000f10:	e030      	b.n	8000f74 <HAL_TIM_MspPostInit+0xfc>
  else if(htim->Instance==TIM3)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a1b      	ldr	r2, [pc, #108]	; (8000f84 <HAL_TIM_MspPostInit+0x10c>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d12b      	bne.n	8000f74 <HAL_TIM_MspPostInit+0xfc>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <HAL_TIM_MspPostInit+0x104>)
 8000f1e:	695b      	ldr	r3, [r3, #20]
 8000f20:	4a16      	ldr	r2, [pc, #88]	; (8000f7c <HAL_TIM_MspPostInit+0x104>)
 8000f22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f26:	6153      	str	r3, [r2, #20]
 8000f28:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <HAL_TIM_MspPostInit+0x104>)
 8000f2a:	695b      	ldr	r3, [r3, #20]
 8000f2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f30:	60bb      	str	r3, [r7, #8]
 8000f32:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = INL_B_Pin|INL_A_Pin;
 8000f34:	2330      	movs	r3, #48	; 0x30
 8000f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000f44:	2302      	movs	r3, #2
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	480c      	ldr	r0, [pc, #48]	; (8000f80 <HAL_TIM_MspPostInit+0x108>)
 8000f50:	f001 f958 	bl	8002204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = INH_A_Pin;
 8000f54:	2380      	movs	r3, #128	; 0x80
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM3;
 8000f64:	230a      	movs	r3, #10
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(INH_A_GPIO_Port, &GPIO_InitStruct);
 8000f68:	f107 0314 	add.w	r3, r7, #20
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4804      	ldr	r0, [pc, #16]	; (8000f80 <HAL_TIM_MspPostInit+0x108>)
 8000f70:	f001 f948 	bl	8002204 <HAL_GPIO_Init>
}
 8000f74:	bf00      	nop
 8000f76:	3728      	adds	r7, #40	; 0x28
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	48000400 	.word	0x48000400
 8000f84:	40000400 	.word	0x40000400

08000f88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f8c:	e7fe      	b.n	8000f8c <NMI_Handler+0x4>

08000f8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f92:	e7fe      	b.n	8000f92 <HardFault_Handler+0x4>

08000f94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f98:	e7fe      	b.n	8000f98 <MemManage_Handler+0x4>

08000f9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f9a:	b480      	push	{r7}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <BusFault_Handler+0x4>

08000fa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa4:	e7fe      	b.n	8000fa4 <UsageFault_Handler+0x4>

08000fa6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fd4:	f000 f884 	bl	80010e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <SystemInit+0x20>)
 8000fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <SystemInit+0x20>)
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001000:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001038 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001004:	f7ff ffea 	bl	8000fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001008:	480c      	ldr	r0, [pc, #48]	; (800103c <LoopForever+0x6>)
  ldr r1, =_edata
 800100a:	490d      	ldr	r1, [pc, #52]	; (8001040 <LoopForever+0xa>)
  ldr r2, =_sidata
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <LoopForever+0xe>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001010:	e002      	b.n	8001018 <LoopCopyDataInit>

08001012 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001012:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001014:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001016:	3304      	adds	r3, #4

08001018 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001018:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800101a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800101c:	d3f9      	bcc.n	8001012 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001020:	4c0a      	ldr	r4, [pc, #40]	; (800104c <LoopForever+0x16>)
  movs r3, #0
 8001022:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001024:	e001      	b.n	800102a <LoopFillZerobss>

08001026 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001026:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001028:	3204      	adds	r2, #4

0800102a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800102a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800102c:	d3fb      	bcc.n	8001026 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102e:	f003 ff41 	bl	8004eb4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001032:	f7ff f8c9 	bl	80001c8 <main>

08001036 <LoopForever>:

LoopForever:
    b LoopForever
 8001036:	e7fe      	b.n	8001036 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001038:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800103c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001040:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001044:	08004f4c 	.word	0x08004f4c
  ldr r2, =_sbss
 8001048:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800104c:	200002ac 	.word	0x200002ac

08001050 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC1_2_IRQHandler>
	...

08001054 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001058:	4b08      	ldr	r3, [pc, #32]	; (800107c <HAL_Init+0x28>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a07      	ldr	r2, [pc, #28]	; (800107c <HAL_Init+0x28>)
 800105e:	f043 0310 	orr.w	r3, r3, #16
 8001062:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001064:	2003      	movs	r0, #3
 8001066:	f001 f82b 	bl	80020c0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106a:	200f      	movs	r0, #15
 800106c:	f000 f808 	bl	8001080 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001070:	f7ff fcda 	bl	8000a28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40022000 	.word	0x40022000

08001080 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <HAL_InitTick+0x54>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <HAL_InitTick+0x58>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	4619      	mov	r1, r3
 8001092:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001096:	fbb3 f3f1 	udiv	r3, r3, r1
 800109a:	fbb2 f3f3 	udiv	r3, r2, r3
 800109e:	4618      	mov	r0, r3
 80010a0:	f001 f835 	bl	800210e <HAL_SYSTICK_Config>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00e      	b.n	80010cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b0f      	cmp	r3, #15
 80010b2:	d80a      	bhi.n	80010ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b4:	2200      	movs	r2, #0
 80010b6:	6879      	ldr	r1, [r7, #4]
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f001 f80b 	bl	80020d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c0:	4a06      	ldr	r2, [pc, #24]	; (80010dc <HAL_InitTick+0x5c>)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	e000      	b.n	80010cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000008 	.word	0x20000008
 80010dc:	20000004 	.word	0x20000004

080010e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_IncTick+0x20>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_IncTick+0x24>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4413      	add	r3, r2
 80010f0:	4a04      	ldr	r2, [pc, #16]	; (8001104 <HAL_IncTick+0x24>)
 80010f2:	6013      	str	r3, [r2, #0]
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	20000008 	.word	0x20000008
 8001104:	200002a8 	.word	0x200002a8

08001108 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return uwTick;  
 800110c:	4b03      	ldr	r3, [pc, #12]	; (800111c <HAL_GetTick+0x14>)
 800110e:	681b      	ldr	r3, [r3, #0]
}
 8001110:	4618      	mov	r0, r3
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	200002a8 	.word	0x200002a8

08001120 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b09a      	sub	sp, #104	; 0x68
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001128:	2300      	movs	r3, #0
 800112a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800112e:	2300      	movs	r3, #0
 8001130:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d101      	bne.n	8001140 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800113c:	2301      	movs	r3, #1
 800113e:	e1c9      	b.n	80014d4 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f003 0310 	and.w	r3, r3, #16
 800114e:	2b00      	cmp	r3, #0
 8001150:	d176      	bne.n	8001240 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	2b00      	cmp	r3, #0
 8001158:	d152      	bne.n	8001200 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff fc7b 	bl	8000a70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d13b      	bne.n	8001200 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f000 fd85 	bl	8001c98 <ADC_Disable>
 800118e:	4603      	mov	r3, r0
 8001190:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	f003 0310 	and.w	r3, r3, #16
 800119c:	2b00      	cmp	r3, #0
 800119e:	d12f      	bne.n	8001200 <HAL_ADC_Init+0xe0>
 80011a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d12b      	bne.n	8001200 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011b0:	f023 0302 	bic.w	r3, r3, #2
 80011b4:	f043 0202 	orr.w	r2, r3, #2
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689a      	ldr	r2, [r3, #8]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80011ca:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689a      	ldr	r2, [r3, #8]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80011da:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011dc:	4b86      	ldr	r3, [pc, #536]	; (80013f8 <HAL_ADC_Init+0x2d8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a86      	ldr	r2, [pc, #536]	; (80013fc <HAL_ADC_Init+0x2dc>)
 80011e2:	fba2 2303 	umull	r2, r3, r2, r3
 80011e6:	0c9a      	lsrs	r2, r3, #18
 80011e8:	4613      	mov	r3, r2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4413      	add	r3, r2
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011f2:	e002      	b.n	80011fa <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d1f9      	bne.n	80011f4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d007      	beq.n	800121e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001218:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800121c:	d110      	bne.n	8001240 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f023 0312 	bic.w	r3, r3, #18
 8001226:	f043 0210 	orr.w	r2, r3, #16
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	f043 0201 	orr.w	r2, r3, #1
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	f003 0310 	and.w	r3, r3, #16
 8001248:	2b00      	cmp	r3, #0
 800124a:	f040 8136 	bne.w	80014ba <HAL_ADC_Init+0x39a>
 800124e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001252:	2b00      	cmp	r3, #0
 8001254:	f040 8131 	bne.w	80014ba <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	689b      	ldr	r3, [r3, #8]
 800125e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001262:	2b00      	cmp	r3, #0
 8001264:	f040 8129 	bne.w	80014ba <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001270:	f043 0202 	orr.w	r2, r3, #2
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001280:	d004      	beq.n	800128c <HAL_ADC_Init+0x16c>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a5e      	ldr	r2, [pc, #376]	; (8001400 <HAL_ADC_Init+0x2e0>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d101      	bne.n	8001290 <HAL_ADC_Init+0x170>
 800128c:	4b5d      	ldr	r3, [pc, #372]	; (8001404 <HAL_ADC_Init+0x2e4>)
 800128e:	e000      	b.n	8001292 <HAL_ADC_Init+0x172>
 8001290:	4b5d      	ldr	r3, [pc, #372]	; (8001408 <HAL_ADC_Init+0x2e8>)
 8001292:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800129c:	d102      	bne.n	80012a4 <HAL_ADC_Init+0x184>
 800129e:	4b58      	ldr	r3, [pc, #352]	; (8001400 <HAL_ADC_Init+0x2e0>)
 80012a0:	60fb      	str	r3, [r7, #12]
 80012a2:	e01a      	b.n	80012da <HAL_ADC_Init+0x1ba>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a55      	ldr	r2, [pc, #340]	; (8001400 <HAL_ADC_Init+0x2e0>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d103      	bne.n	80012b6 <HAL_ADC_Init+0x196>
 80012ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	e011      	b.n	80012da <HAL_ADC_Init+0x1ba>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a54      	ldr	r2, [pc, #336]	; (800140c <HAL_ADC_Init+0x2ec>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d102      	bne.n	80012c6 <HAL_ADC_Init+0x1a6>
 80012c0:	4b53      	ldr	r3, [pc, #332]	; (8001410 <HAL_ADC_Init+0x2f0>)
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	e009      	b.n	80012da <HAL_ADC_Init+0x1ba>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a51      	ldr	r2, [pc, #324]	; (8001410 <HAL_ADC_Init+0x2f0>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d102      	bne.n	80012d6 <HAL_ADC_Init+0x1b6>
 80012d0:	4b4e      	ldr	r3, [pc, #312]	; (800140c <HAL_ADC_Init+0x2ec>)
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	e001      	b.n	80012da <HAL_ADC_Init+0x1ba>
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d108      	bne.n	80012fa <HAL_ADC_Init+0x1da>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0301 	and.w	r3, r3, #1
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d101      	bne.n	80012fa <HAL_ADC_Init+0x1da>
 80012f6:	2301      	movs	r3, #1
 80012f8:	e000      	b.n	80012fc <HAL_ADC_Init+0x1dc>
 80012fa:	2300      	movs	r3, #0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d11c      	bne.n	800133a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001300:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001302:	2b00      	cmp	r3, #0
 8001304:	d010      	beq.n	8001328 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 0303 	and.w	r3, r3, #3
 800130e:	2b01      	cmp	r3, #1
 8001310:	d107      	bne.n	8001322 <HAL_ADC_Init+0x202>
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b01      	cmp	r3, #1
 800131c:	d101      	bne.n	8001322 <HAL_ADC_Init+0x202>
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <HAL_ADC_Init+0x204>
 8001322:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001324:	2b00      	cmp	r3, #0
 8001326:	d108      	bne.n	800133a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001328:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	431a      	orrs	r2, r3
 8001336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001338:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	7e5b      	ldrb	r3, [r3, #25]
 800133e:	035b      	lsls	r3, r3, #13
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001344:	2a01      	cmp	r2, #1
 8001346:	d002      	beq.n	800134e <HAL_ADC_Init+0x22e>
 8001348:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800134c:	e000      	b.n	8001350 <HAL_ADC_Init+0x230>
 800134e:	2200      	movs	r2, #0
 8001350:	431a      	orrs	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	4313      	orrs	r3, r2
 800135e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001360:	4313      	orrs	r3, r2
 8001362:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f893 3020 	ldrb.w	r3, [r3, #32]
 800136a:	2b01      	cmp	r3, #1
 800136c:	d11b      	bne.n	80013a6 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	7e5b      	ldrb	r3, [r3, #25]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d109      	bne.n	800138a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137a:	3b01      	subs	r3, #1
 800137c:	045a      	lsls	r2, r3, #17
 800137e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001380:	4313      	orrs	r3, r2
 8001382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001386:	663b      	str	r3, [r7, #96]	; 0x60
 8001388:	e00d      	b.n	80013a6 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001392:	f043 0220 	orr.w	r2, r3, #32
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139e:	f043 0201 	orr.w	r2, r3, #1
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d03a      	beq.n	8001424 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a16      	ldr	r2, [pc, #88]	; (800140c <HAL_ADC_Init+0x2ec>)
 80013b4:	4293      	cmp	r3, r2
 80013b6:	d004      	beq.n	80013c2 <HAL_ADC_Init+0x2a2>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a14      	ldr	r2, [pc, #80]	; (8001410 <HAL_ADC_Init+0x2f0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d128      	bne.n	8001414 <HAL_ADC_Init+0x2f4>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013c6:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80013ca:	d012      	beq.n	80013f2 <HAL_ADC_Init+0x2d2>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013d4:	d00a      	beq.n	80013ec <HAL_ADC_Init+0x2cc>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013da:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80013de:	d002      	beq.n	80013e6 <HAL_ADC_Init+0x2c6>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e4:	e018      	b.n	8001418 <HAL_ADC_Init+0x2f8>
 80013e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013ea:	e015      	b.n	8001418 <HAL_ADC_Init+0x2f8>
 80013ec:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80013f0:	e012      	b.n	8001418 <HAL_ADC_Init+0x2f8>
 80013f2:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80013f6:	e00f      	b.n	8001418 <HAL_ADC_Init+0x2f8>
 80013f8:	20000000 	.word	0x20000000
 80013fc:	431bde83 	.word	0x431bde83
 8001400:	50000100 	.word	0x50000100
 8001404:	50000300 	.word	0x50000300
 8001408:	50000700 	.word	0x50000700
 800140c:	50000400 	.word	0x50000400
 8001410:	50000500 	.word	0x50000500
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800141c:	4313      	orrs	r3, r2
 800141e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001420:	4313      	orrs	r3, r2
 8001422:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f003 030c 	and.w	r3, r3, #12
 800142e:	2b00      	cmp	r3, #0
 8001430:	d114      	bne.n	800145c <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	6812      	ldr	r2, [r2, #0]
 800143c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001440:	f023 0302 	bic.w	r3, r3, #2
 8001444:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	7e1b      	ldrb	r3, [r3, #24]
 800144a:	039a      	lsls	r2, r3, #14
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4313      	orrs	r3, r2
 8001456:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001458:	4313      	orrs	r3, r2
 800145a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68da      	ldr	r2, [r3, #12]
 8001462:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <HAL_ADC_Init+0x3bc>)
 8001464:	4013      	ands	r3, r2
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800146c:	430b      	orrs	r3, r1
 800146e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d10c      	bne.n	8001492 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f023 010f 	bic.w	r1, r3, #15
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	1e5a      	subs	r2, r3, #1
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	631a      	str	r2, [r3, #48]	; 0x30
 8001490:	e007      	b.n	80014a2 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f022 020f 	bic.w	r2, r2, #15
 80014a0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	f023 0303 	bic.w	r3, r3, #3
 80014b0:	f043 0201 	orr.w	r2, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	641a      	str	r2, [r3, #64]	; 0x40
 80014b8:	e00a      	b.n	80014d0 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f023 0312 	bic.w	r3, r3, #18
 80014c2:	f043 0210 	orr.w	r2, r3, #16
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80014ca:	2301      	movs	r3, #1
 80014cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80014d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3768      	adds	r7, #104	; 0x68
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	fff0c007 	.word	0xfff0c007

080014e0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b09b      	sub	sp, #108	; 0x6c
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d101      	bne.n	8001502 <HAL_ADC_ConfigChannel+0x22>
 80014fe:	2302      	movs	r3, #2
 8001500:	e2c8      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x5b4>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	2b00      	cmp	r3, #0
 8001516:	f040 82ac 	bne.w	8001a72 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b04      	cmp	r3, #4
 8001520:	d81c      	bhi.n	800155c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685a      	ldr	r2, [r3, #4]
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	461a      	mov	r2, r3
 8001536:	231f      	movs	r3, #31
 8001538:	4093      	lsls	r3, r2
 800153a:	43db      	mvns	r3, r3
 800153c:	4019      	ands	r1, r3
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685a      	ldr	r2, [r3, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	fa00 f203 	lsl.w	r2, r0, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	631a      	str	r2, [r3, #48]	; 0x30
 800155a:	e063      	b.n	8001624 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	2b09      	cmp	r3, #9
 8001562:	d81e      	bhi.n	80015a2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	4613      	mov	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4413      	add	r3, r2
 8001574:	005b      	lsls	r3, r3, #1
 8001576:	3b1e      	subs	r3, #30
 8001578:	221f      	movs	r2, #31
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	4019      	ands	r1, r3
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	6818      	ldr	r0, [r3, #0]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685a      	ldr	r2, [r3, #4]
 800158a:	4613      	mov	r3, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	4413      	add	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	3b1e      	subs	r3, #30
 8001594:	fa00 f203 	lsl.w	r2, r0, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	430a      	orrs	r2, r1
 800159e:	635a      	str	r2, [r3, #52]	; 0x34
 80015a0:	e040      	b.n	8001624 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b0e      	cmp	r3, #14
 80015a8:	d81e      	bhi.n	80015e8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	3b3c      	subs	r3, #60	; 0x3c
 80015be:	221f      	movs	r2, #31
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	4019      	ands	r1, r3
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	6818      	ldr	r0, [r3, #0]
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	4413      	add	r3, r2
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	3b3c      	subs	r3, #60	; 0x3c
 80015da:	fa00 f203 	lsl.w	r2, r0, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	430a      	orrs	r2, r1
 80015e4:	639a      	str	r2, [r3, #56]	; 0x38
 80015e6:	e01d      	b.n	8001624 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685a      	ldr	r2, [r3, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	4413      	add	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	3b5a      	subs	r3, #90	; 0x5a
 80015fc:	221f      	movs	r2, #31
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	4019      	ands	r1, r3
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	6818      	ldr	r0, [r3, #0]
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685a      	ldr	r2, [r3, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	3b5a      	subs	r3, #90	; 0x5a
 8001618:	fa00 f203 	lsl.w	r2, r0, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	430a      	orrs	r2, r1
 8001622:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	2b00      	cmp	r3, #0
 8001630:	f040 80e5 	bne.w	80017fe <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b09      	cmp	r3, #9
 800163a:	d91c      	bls.n	8001676 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6999      	ldr	r1, [r3, #24]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	4613      	mov	r3, r2
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4413      	add	r3, r2
 800164c:	3b1e      	subs	r3, #30
 800164e:	2207      	movs	r2, #7
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	4019      	ands	r1, r3
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	6898      	ldr	r0, [r3, #8]
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	4613      	mov	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	3b1e      	subs	r3, #30
 8001668:	fa00 f203 	lsl.w	r2, r0, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	619a      	str	r2, [r3, #24]
 8001674:	e019      	b.n	80016aa <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	6959      	ldr	r1, [r3, #20]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4613      	mov	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	4413      	add	r3, r2
 8001686:	2207      	movs	r2, #7
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	4019      	ands	r1, r3
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	6898      	ldr	r0, [r3, #8]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4613      	mov	r3, r2
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4413      	add	r3, r2
 800169e:	fa00 f203 	lsl.w	r2, r0, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	695a      	ldr	r2, [r3, #20]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	08db      	lsrs	r3, r3, #3
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	691b      	ldr	r3, [r3, #16]
 80016c6:	3b01      	subs	r3, #1
 80016c8:	2b03      	cmp	r3, #3
 80016ca:	d84f      	bhi.n	800176c <HAL_ADC_ConfigChannel+0x28c>
 80016cc:	a201      	add	r2, pc, #4	; (adr r2, 80016d4 <HAL_ADC_ConfigChannel+0x1f4>)
 80016ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d2:	bf00      	nop
 80016d4:	080016e5 	.word	0x080016e5
 80016d8:	08001707 	.word	0x08001707
 80016dc:	08001729 	.word	0x08001729
 80016e0:	0800174b 	.word	0x0800174b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016ea:	4b99      	ldr	r3, [pc, #612]	; (8001950 <HAL_ADC_ConfigChannel+0x470>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	6812      	ldr	r2, [r2, #0]
 80016f2:	0691      	lsls	r1, r2, #26
 80016f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80016f6:	430a      	orrs	r2, r1
 80016f8:	431a      	orrs	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001702:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001704:	e07b      	b.n	80017fe <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800170c:	4b90      	ldr	r3, [pc, #576]	; (8001950 <HAL_ADC_ConfigChannel+0x470>)
 800170e:	4013      	ands	r3, r2
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	6812      	ldr	r2, [r2, #0]
 8001714:	0691      	lsls	r1, r2, #26
 8001716:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001718:	430a      	orrs	r2, r1
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001724:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001726:	e06a      	b.n	80017fe <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800172e:	4b88      	ldr	r3, [pc, #544]	; (8001950 <HAL_ADC_ConfigChannel+0x470>)
 8001730:	4013      	ands	r3, r2
 8001732:	683a      	ldr	r2, [r7, #0]
 8001734:	6812      	ldr	r2, [r2, #0]
 8001736:	0691      	lsls	r1, r2, #26
 8001738:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800173a:	430a      	orrs	r2, r1
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001746:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001748:	e059      	b.n	80017fe <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001750:	4b7f      	ldr	r3, [pc, #508]	; (8001950 <HAL_ADC_ConfigChannel+0x470>)
 8001752:	4013      	ands	r3, r2
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	0691      	lsls	r1, r2, #26
 800175a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800175c:	430a      	orrs	r2, r1
 800175e:	431a      	orrs	r2, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001768:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800176a:	e048      	b.n	80017fe <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001772:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	069b      	lsls	r3, r3, #26
 800177c:	429a      	cmp	r2, r3
 800177e:	d107      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800178e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001796:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	069b      	lsls	r3, r3, #26
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d107      	bne.n	80017b4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017b2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80017ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	069b      	lsls	r3, r3, #26
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d107      	bne.n	80017d8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017d6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	069b      	lsls	r3, r3, #26
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d107      	bne.n	80017fc <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80017fa:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80017fc:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	2b01      	cmp	r3, #1
 800180a:	d108      	bne.n	800181e <HAL_ADC_ConfigChannel+0x33e>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0301 	and.w	r3, r3, #1
 8001816:	2b01      	cmp	r3, #1
 8001818:	d101      	bne.n	800181e <HAL_ADC_ConfigChannel+0x33e>
 800181a:	2301      	movs	r3, #1
 800181c:	e000      	b.n	8001820 <HAL_ADC_ConfigChannel+0x340>
 800181e:	2300      	movs	r3, #0
 8001820:	2b00      	cmp	r3, #0
 8001822:	f040 8131 	bne.w	8001a88 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	2b01      	cmp	r3, #1
 800182c:	d00f      	beq.n	800184e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2201      	movs	r2, #1
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43da      	mvns	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	400a      	ands	r2, r1
 8001848:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800184c:	e049      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2201      	movs	r2, #1
 800185c:	409a      	lsls	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2b09      	cmp	r3, #9
 800186e:	d91c      	bls.n	80018aa <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6999      	ldr	r1, [r3, #24]
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4613      	mov	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	3b1b      	subs	r3, #27
 8001882:	2207      	movs	r2, #7
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	4019      	ands	r1, r3
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	6898      	ldr	r0, [r3, #8]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4613      	mov	r3, r2
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	3b1b      	subs	r3, #27
 800189c:	fa00 f203 	lsl.w	r2, r0, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	619a      	str	r2, [r3, #24]
 80018a8:	e01b      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6959      	ldr	r1, [r3, #20]
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	1c5a      	adds	r2, r3, #1
 80018b6:	4613      	mov	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4413      	add	r3, r2
 80018bc:	2207      	movs	r2, #7
 80018be:	fa02 f303 	lsl.w	r3, r2, r3
 80018c2:	43db      	mvns	r3, r3
 80018c4:	4019      	ands	r1, r3
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	6898      	ldr	r0, [r3, #8]
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	fa00 f203 	lsl.w	r2, r0, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018ea:	d004      	beq.n	80018f6 <HAL_ADC_ConfigChannel+0x416>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a18      	ldr	r2, [pc, #96]	; (8001954 <HAL_ADC_ConfigChannel+0x474>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d101      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x41a>
 80018f6:	4b18      	ldr	r3, [pc, #96]	; (8001958 <HAL_ADC_ConfigChannel+0x478>)
 80018f8:	e000      	b.n	80018fc <HAL_ADC_ConfigChannel+0x41c>
 80018fa:	4b18      	ldr	r3, [pc, #96]	; (800195c <HAL_ADC_ConfigChannel+0x47c>)
 80018fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2b10      	cmp	r3, #16
 8001904:	d105      	bne.n	8001912 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800190e:	2b00      	cmp	r3, #0
 8001910:	d015      	beq.n	800193e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001916:	2b11      	cmp	r3, #17
 8001918:	d105      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800191a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00b      	beq.n	800193e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800192a:	2b12      	cmp	r3, #18
 800192c:	f040 80ac 	bne.w	8001a88 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001930:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001938:	2b00      	cmp	r3, #0
 800193a:	f040 80a5 	bne.w	8001a88 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001946:	d10b      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x480>
 8001948:	4b02      	ldr	r3, [pc, #8]	; (8001954 <HAL_ADC_ConfigChannel+0x474>)
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	e023      	b.n	8001996 <HAL_ADC_ConfigChannel+0x4b6>
 800194e:	bf00      	nop
 8001950:	83fff000 	.word	0x83fff000
 8001954:	50000100 	.word	0x50000100
 8001958:	50000300 	.word	0x50000300
 800195c:	50000700 	.word	0x50000700
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a4e      	ldr	r2, [pc, #312]	; (8001aa0 <HAL_ADC_ConfigChannel+0x5c0>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d103      	bne.n	8001972 <HAL_ADC_ConfigChannel+0x492>
 800196a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	e011      	b.n	8001996 <HAL_ADC_ConfigChannel+0x4b6>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a4b      	ldr	r2, [pc, #300]	; (8001aa4 <HAL_ADC_ConfigChannel+0x5c4>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d102      	bne.n	8001982 <HAL_ADC_ConfigChannel+0x4a2>
 800197c:	4b4a      	ldr	r3, [pc, #296]	; (8001aa8 <HAL_ADC_ConfigChannel+0x5c8>)
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	e009      	b.n	8001996 <HAL_ADC_ConfigChannel+0x4b6>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a48      	ldr	r2, [pc, #288]	; (8001aa8 <HAL_ADC_ConfigChannel+0x5c8>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d102      	bne.n	8001992 <HAL_ADC_ConfigChannel+0x4b2>
 800198c:	4b45      	ldr	r3, [pc, #276]	; (8001aa4 <HAL_ADC_ConfigChannel+0x5c4>)
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	e001      	b.n	8001996 <HAL_ADC_ConfigChannel+0x4b6>
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d108      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x4d6>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d101      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x4d6>
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <HAL_ADC_ConfigChannel+0x4d8>
 80019b6:	2300      	movs	r3, #0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d150      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80019bc:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d010      	beq.n	80019e4 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d107      	bne.n	80019de <HAL_ADC_ConfigChannel+0x4fe>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d101      	bne.n	80019de <HAL_ADC_ConfigChannel+0x4fe>
 80019da:	2301      	movs	r3, #1
 80019dc:	e000      	b.n	80019e0 <HAL_ADC_ConfigChannel+0x500>
 80019de:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d13c      	bne.n	8001a5e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2b10      	cmp	r3, #16
 80019ea:	d11d      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x548>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019f4:	d118      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80019f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a00:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a02:	4b2a      	ldr	r3, [pc, #168]	; (8001aac <HAL_ADC_ConfigChannel+0x5cc>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a2a      	ldr	r2, [pc, #168]	; (8001ab0 <HAL_ADC_ConfigChannel+0x5d0>)
 8001a08:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0c:	0c9a      	lsrs	r2, r3, #18
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a18:	e002      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f9      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a26:	e02e      	b.n	8001a86 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2b11      	cmp	r3, #17
 8001a2e:	d10b      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x568>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a38:	d106      	bne.n	8001a48 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a44:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a46:	e01e      	b.n	8001a86 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b12      	cmp	r3, #18
 8001a4e:	d11a      	bne.n	8001a86 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001a50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a5a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a5c:	e013      	b.n	8001a86 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	f043 0220 	orr.w	r2, r3, #32
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001a70:	e00a      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a76:	f043 0220 	orr.w	r2, r3, #32
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001a84:	e000      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001a86:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001a90:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	376c      	adds	r7, #108	; 0x6c
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	50000100 	.word	0x50000100
 8001aa4:	50000400 	.word	0x50000400
 8001aa8:	50000500 	.word	0x50000500
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	431bde83 	.word	0x431bde83

08001ab4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b099      	sub	sp, #100	; 0x64
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001acc:	d102      	bne.n	8001ad4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001ace:	4b6d      	ldr	r3, [pc, #436]	; (8001c84 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	e01a      	b.n	8001b0a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a6a      	ldr	r2, [pc, #424]	; (8001c84 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d103      	bne.n	8001ae6 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001ade:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	e011      	b.n	8001b0a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a67      	ldr	r2, [pc, #412]	; (8001c88 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d102      	bne.n	8001af6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001af0:	4b66      	ldr	r3, [pc, #408]	; (8001c8c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	e009      	b.n	8001b0a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a64      	ldr	r2, [pc, #400]	; (8001c8c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d102      	bne.n	8001b06 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001b00:	4b61      	ldr	r3, [pc, #388]	; (8001c88 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	e001      	b.n	8001b0a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001b06:	2300      	movs	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e0b0      	b.n	8001c76 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e0a9      	b.n	8001c76 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f040 808d 	bne.w	8001c54 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f040 8086 	bne.w	8001c54 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b50:	d004      	beq.n	8001b5c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a4b      	ldr	r2, [pc, #300]	; (8001c84 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d101      	bne.n	8001b60 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001b5c:	4b4c      	ldr	r3, [pc, #304]	; (8001c90 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001b5e:	e000      	b.n	8001b62 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001b60:	4b4c      	ldr	r3, [pc, #304]	; (8001c94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001b62:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d040      	beq.n	8001bee <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001b6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	6859      	ldr	r1, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b7e:	035b      	lsls	r3, r3, #13
 8001b80:	430b      	orrs	r3, r1
 8001b82:	431a      	orrs	r2, r3
 8001b84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001b86:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d108      	bne.n	8001ba8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d101      	bne.n	8001ba8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d15c      	bne.n	8001c68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d107      	bne.n	8001bca <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001bba:	68bb      	ldr	r3, [r7, #8]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e000      	b.n	8001bcc <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001bca:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d14b      	bne.n	8001c68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001bd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001bd8:	f023 030f 	bic.w	r3, r3, #15
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	6811      	ldr	r1, [r2, #0]
 8001be0:	683a      	ldr	r2, [r7, #0]
 8001be2:	6892      	ldr	r2, [r2, #8]
 8001be4:	430a      	orrs	r2, r1
 8001be6:	431a      	orrs	r2, r3
 8001be8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bea:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001bec:	e03c      	b.n	8001c68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001bf8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d108      	bne.n	8001c1a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001c16:	2301      	movs	r3, #1
 8001c18:	e000      	b.n	8001c1c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d123      	bne.n	8001c68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d107      	bne.n	8001c3c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001c3c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d112      	bne.n	8001c68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001c42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001c4a:	f023 030f 	bic.w	r3, r3, #15
 8001c4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001c50:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c52:	e009      	b.n	8001c68 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c58:	f043 0220 	orr.w	r2, r3, #32
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001c66:	e000      	b.n	8001c6a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001c68:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001c72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8001c76:	4618      	mov	r0, r3
 8001c78:	3764      	adds	r7, #100	; 0x64
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	50000100 	.word	0x50000100
 8001c88:	50000400 	.word	0x50000400
 8001c8c:	50000500 	.word	0x50000500
 8001c90:	50000300 	.word	0x50000300
 8001c94:	50000700 	.word	0x50000700

08001c98 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 0303 	and.w	r3, r3, #3
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d108      	bne.n	8001cc4 <ADC_Disable+0x2c>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d101      	bne.n	8001cc4 <ADC_Disable+0x2c>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <ADC_Disable+0x2e>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d047      	beq.n	8001d5a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	f003 030d 	and.w	r3, r3, #13
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d10f      	bne.n	8001cf8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f042 0202 	orr.w	r2, r2, #2
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2203      	movs	r2, #3
 8001cee:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001cf0:	f7ff fa0a 	bl	8001108 <HAL_GetTick>
 8001cf4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001cf6:	e029      	b.n	8001d4c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	f043 0210 	orr.w	r2, r3, #16
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d08:	f043 0201 	orr.w	r2, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e023      	b.n	8001d5c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d14:	f7ff f9f8 	bl	8001108 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d914      	bls.n	8001d4c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d10d      	bne.n	8001d4c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d34:	f043 0210 	orr.w	r2, r3, #16
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d40:	f043 0201 	orr.w	r2, r3, #1
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e007      	b.n	8001d5c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	f003 0301 	and.w	r3, r3, #1
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d0dc      	beq.n	8001d14 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3710      	adds	r7, #16
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}

08001d64 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e0ed      	b.n	8001f52 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d102      	bne.n	8001d88 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f7fe ff20 	bl	8000bc8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f042 0201 	orr.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d98:	f7ff f9b6 	bl	8001108 <HAL_GetTick>
 8001d9c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001d9e:	e012      	b.n	8001dc6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001da0:	f7ff f9b2 	bl	8001108 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b0a      	cmp	r3, #10
 8001dac:	d90b      	bls.n	8001dc6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2205      	movs	r2, #5
 8001dbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e0c5      	b.n	8001f52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0e5      	beq.n	8001da0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0202 	bic.w	r2, r2, #2
 8001de2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001de4:	f7ff f990 	bl	8001108 <HAL_GetTick>
 8001de8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001dea:	e012      	b.n	8001e12 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001dec:	f7ff f98c 	bl	8001108 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b0a      	cmp	r3, #10
 8001df8:	d90b      	bls.n	8001e12 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2205      	movs	r2, #5
 8001e0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e09f      	b.n	8001f52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1e5      	bne.n	8001dec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	7e1b      	ldrb	r3, [r3, #24]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d108      	bne.n	8001e3a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	e007      	b.n	8001e4a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	7e5b      	ldrb	r3, [r3, #25]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d108      	bne.n	8001e64 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	e007      	b.n	8001e74 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e72:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	7e9b      	ldrb	r3, [r3, #26]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d108      	bne.n	8001e8e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0220 	orr.w	r2, r2, #32
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	e007      	b.n	8001e9e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0220 	bic.w	r2, r2, #32
 8001e9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	7edb      	ldrb	r3, [r3, #27]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d108      	bne.n	8001eb8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0210 	bic.w	r2, r2, #16
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	e007      	b.n	8001ec8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0210 	orr.w	r2, r2, #16
 8001ec6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	7f1b      	ldrb	r3, [r3, #28]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d108      	bne.n	8001ee2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0208 	orr.w	r2, r2, #8
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	e007      	b.n	8001ef2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0208 	bic.w	r2, r2, #8
 8001ef0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	7f5b      	ldrb	r3, [r3, #29]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d108      	bne.n	8001f0c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f042 0204 	orr.w	r2, r2, #4
 8001f08:	601a      	str	r2, [r3, #0]
 8001f0a:	e007      	b.n	8001f1c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f022 0204 	bic.w	r2, r2, #4
 8001f1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	695b      	ldr	r3, [r3, #20]
 8001f30:	ea42 0103 	orr.w	r1, r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	1e5a      	subs	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2200      	movs	r2, #0
 8001f46:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f8e:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	60d3      	str	r3, [r2, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa8:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <__NVIC_GetPriorityGrouping+0x18>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	f003 0307 	and.w	r3, r3, #7
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	6039      	str	r1, [r7, #0]
 8001fca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	db0a      	blt.n	8001fea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	b2da      	uxtb	r2, r3
 8001fd8:	490c      	ldr	r1, [pc, #48]	; (800200c <__NVIC_SetPriority+0x4c>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	0112      	lsls	r2, r2, #4
 8001fe0:	b2d2      	uxtb	r2, r2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fe8:	e00a      	b.n	8002000 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	4908      	ldr	r1, [pc, #32]	; (8002010 <__NVIC_SetPriority+0x50>)
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	3b04      	subs	r3, #4
 8001ff8:	0112      	lsls	r2, r2, #4
 8001ffa:	b2d2      	uxtb	r2, r2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	761a      	strb	r2, [r3, #24]
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000e100 	.word	0xe000e100
 8002010:	e000ed00 	.word	0xe000ed00

08002014 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002014:	b480      	push	{r7}
 8002016:	b089      	sub	sp, #36	; 0x24
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	60b9      	str	r1, [r7, #8]
 800201e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	f003 0307 	and.w	r3, r3, #7
 8002026:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	f1c3 0307 	rsb	r3, r3, #7
 800202e:	2b04      	cmp	r3, #4
 8002030:	bf28      	it	cs
 8002032:	2304      	movcs	r3, #4
 8002034:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	3304      	adds	r3, #4
 800203a:	2b06      	cmp	r3, #6
 800203c:	d902      	bls.n	8002044 <NVIC_EncodePriority+0x30>
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3b03      	subs	r3, #3
 8002042:	e000      	b.n	8002046 <NVIC_EncodePriority+0x32>
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002048:	f04f 32ff 	mov.w	r2, #4294967295
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43da      	mvns	r2, r3
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	401a      	ands	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800205c:	f04f 31ff 	mov.w	r1, #4294967295
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	fa01 f303 	lsl.w	r3, r1, r3
 8002066:	43d9      	mvns	r1, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800206c:	4313      	orrs	r3, r2
         );
}
 800206e:	4618      	mov	r0, r3
 8002070:	3724      	adds	r7, #36	; 0x24
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
	...

0800207c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3b01      	subs	r3, #1
 8002088:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800208c:	d301      	bcc.n	8002092 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800208e:	2301      	movs	r3, #1
 8002090:	e00f      	b.n	80020b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002092:	4a0a      	ldr	r2, [pc, #40]	; (80020bc <SysTick_Config+0x40>)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3b01      	subs	r3, #1
 8002098:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800209a:	210f      	movs	r1, #15
 800209c:	f04f 30ff 	mov.w	r0, #4294967295
 80020a0:	f7ff ff8e 	bl	8001fc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020a4:	4b05      	ldr	r3, [pc, #20]	; (80020bc <SysTick_Config+0x40>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020aa:	4b04      	ldr	r3, [pc, #16]	; (80020bc <SysTick_Config+0x40>)
 80020ac:	2207      	movs	r2, #7
 80020ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	e000e010 	.word	0xe000e010

080020c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ff47 	bl	8001f5c <__NVIC_SetPriorityGrouping>
}
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b086      	sub	sp, #24
 80020da:	af00      	add	r7, sp, #0
 80020dc:	4603      	mov	r3, r0
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	607a      	str	r2, [r7, #4]
 80020e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020e4:	2300      	movs	r3, #0
 80020e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020e8:	f7ff ff5c 	bl	8001fa4 <__NVIC_GetPriorityGrouping>
 80020ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020ee:	687a      	ldr	r2, [r7, #4]
 80020f0:	68b9      	ldr	r1, [r7, #8]
 80020f2:	6978      	ldr	r0, [r7, #20]
 80020f4:	f7ff ff8e 	bl	8002014 <NVIC_EncodePriority>
 80020f8:	4602      	mov	r2, r0
 80020fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020fe:	4611      	mov	r1, r2
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff ff5d 	bl	8001fc0 <__NVIC_SetPriority>
}
 8002106:	bf00      	nop
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ffb0 	bl	800207c <SysTick_Config>
 800211c:	4603      	mov	r3, r0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b082      	sub	sp, #8
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e014      	b.n	8002162 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	791b      	ldrb	r3, [r3, #4]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d105      	bne.n	800214e <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7fe fd81 	bl	8000c50 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2202      	movs	r2, #2
 8002152:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2200      	movs	r2, #0
 8002158:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2201      	movs	r2, #1
 800215e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800216a:	b480      	push	{r7}
 800216c:	b087      	sub	sp, #28
 800216e:	af00      	add	r7, sp, #0
 8002170:	60f8      	str	r0, [r7, #12]
 8002172:	60b9      	str	r1, [r7, #8]
 8002174:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	795b      	ldrb	r3, [r3, #5]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d101      	bne.n	800218a <HAL_DAC_ConfigChannel+0x20>
 8002186:	2302      	movs	r3, #2
 8002188:	e036      	b.n	80021f8 <HAL_DAC_ConfigChannel+0x8e>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2201      	movs	r2, #1
 800218e:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2202      	movs	r2, #2
 8002194:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800219e:	f640 72fe 	movw	r2, #4094	; 0xffe
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	4013      	ands	r3, r2
 80021ae:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80021bc:	693a      	ldr	r2, [r7, #16]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	697a      	ldr	r2, [r7, #20]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	6819      	ldr	r1, [r3, #0]
 80021d8:	22c0      	movs	r2, #192	; 0xc0
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	43da      	mvns	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	400a      	ands	r2, r1
 80021e8:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2201      	movs	r2, #1
 80021ee:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	371c      	adds	r7, #28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002204:	b480      	push	{r7}
 8002206:	b087      	sub	sp, #28
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002212:	e154      	b.n	80024be <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	2101      	movs	r1, #1
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	fa01 f303 	lsl.w	r3, r1, r3
 8002220:	4013      	ands	r3, r2
 8002222:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2b00      	cmp	r3, #0
 8002228:	f000 8146 	beq.w	80024b8 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 0303 	and.w	r3, r3, #3
 8002234:	2b01      	cmp	r3, #1
 8002236:	d005      	beq.n	8002244 <HAL_GPIO_Init+0x40>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d130      	bne.n	80022a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	2203      	movs	r2, #3
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	4013      	ands	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	68da      	ldr	r2, [r3, #12]
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4313      	orrs	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800227a:	2201      	movs	r2, #1
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4013      	ands	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	091b      	lsrs	r3, r3, #4
 8002290:	f003 0201 	and.w	r2, r3, #1
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	693a      	ldr	r2, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 0303 	and.w	r3, r3, #3
 80022ae:	2b03      	cmp	r3, #3
 80022b0:	d017      	beq.n	80022e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	2203      	movs	r2, #3
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4013      	ands	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	693a      	ldr	r2, [r7, #16]
 80022e0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d123      	bne.n	8002336 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	08da      	lsrs	r2, r3, #3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	3208      	adds	r2, #8
 80022f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	220f      	movs	r2, #15
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	43db      	mvns	r3, r3
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4013      	ands	r3, r2
 8002310:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	f003 0307 	and.w	r3, r3, #7
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	693a      	ldr	r2, [r7, #16]
 8002324:	4313      	orrs	r3, r2
 8002326:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	08da      	lsrs	r2, r3, #3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3208      	adds	r2, #8
 8002330:	6939      	ldr	r1, [r7, #16]
 8002332:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	2203      	movs	r2, #3
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43db      	mvns	r3, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4013      	ands	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 0203 	and.w	r2, r3, #3
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 80a0 	beq.w	80024b8 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002378:	4b58      	ldr	r3, [pc, #352]	; (80024dc <HAL_GPIO_Init+0x2d8>)
 800237a:	699b      	ldr	r3, [r3, #24]
 800237c:	4a57      	ldr	r2, [pc, #348]	; (80024dc <HAL_GPIO_Init+0x2d8>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6193      	str	r3, [r2, #24]
 8002384:	4b55      	ldr	r3, [pc, #340]	; (80024dc <HAL_GPIO_Init+0x2d8>)
 8002386:	699b      	ldr	r3, [r3, #24]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002390:	4a53      	ldr	r2, [pc, #332]	; (80024e0 <HAL_GPIO_Init+0x2dc>)
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	089b      	lsrs	r3, r3, #2
 8002396:	3302      	adds	r3, #2
 8002398:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800239c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	220f      	movs	r2, #15
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	43db      	mvns	r3, r3
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4013      	ands	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80023ba:	d019      	beq.n	80023f0 <HAL_GPIO_Init+0x1ec>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4a49      	ldr	r2, [pc, #292]	; (80024e4 <HAL_GPIO_Init+0x2e0>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d013      	beq.n	80023ec <HAL_GPIO_Init+0x1e8>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	4a48      	ldr	r2, [pc, #288]	; (80024e8 <HAL_GPIO_Init+0x2e4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d00d      	beq.n	80023e8 <HAL_GPIO_Init+0x1e4>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	4a47      	ldr	r2, [pc, #284]	; (80024ec <HAL_GPIO_Init+0x2e8>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d007      	beq.n	80023e4 <HAL_GPIO_Init+0x1e0>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4a46      	ldr	r2, [pc, #280]	; (80024f0 <HAL_GPIO_Init+0x2ec>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d101      	bne.n	80023e0 <HAL_GPIO_Init+0x1dc>
 80023dc:	2304      	movs	r3, #4
 80023de:	e008      	b.n	80023f2 <HAL_GPIO_Init+0x1ee>
 80023e0:	2305      	movs	r3, #5
 80023e2:	e006      	b.n	80023f2 <HAL_GPIO_Init+0x1ee>
 80023e4:	2303      	movs	r3, #3
 80023e6:	e004      	b.n	80023f2 <HAL_GPIO_Init+0x1ee>
 80023e8:	2302      	movs	r3, #2
 80023ea:	e002      	b.n	80023f2 <HAL_GPIO_Init+0x1ee>
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <HAL_GPIO_Init+0x1ee>
 80023f0:	2300      	movs	r3, #0
 80023f2:	697a      	ldr	r2, [r7, #20]
 80023f4:	f002 0203 	and.w	r2, r2, #3
 80023f8:	0092      	lsls	r2, r2, #2
 80023fa:	4093      	lsls	r3, r2
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002402:	4937      	ldr	r1, [pc, #220]	; (80024e0 <HAL_GPIO_Init+0x2dc>)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	3302      	adds	r3, #2
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002410:	4b38      	ldr	r3, [pc, #224]	; (80024f4 <HAL_GPIO_Init+0x2f0>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	43db      	mvns	r3, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4013      	ands	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4313      	orrs	r3, r2
 8002432:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002434:	4a2f      	ldr	r2, [pc, #188]	; (80024f4 <HAL_GPIO_Init+0x2f0>)
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800243a:	4b2e      	ldr	r3, [pc, #184]	; (80024f4 <HAL_GPIO_Init+0x2f0>)
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	43db      	mvns	r3, r3
 8002444:	693a      	ldr	r2, [r7, #16]
 8002446:	4013      	ands	r3, r2
 8002448:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4313      	orrs	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800245e:	4a25      	ldr	r2, [pc, #148]	; (80024f4 <HAL_GPIO_Init+0x2f0>)
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002464:	4b23      	ldr	r3, [pc, #140]	; (80024f4 <HAL_GPIO_Init+0x2f0>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	43db      	mvns	r3, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002480:	693a      	ldr	r2, [r7, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002488:	4a1a      	ldr	r2, [pc, #104]	; (80024f4 <HAL_GPIO_Init+0x2f0>)
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800248e:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_GPIO_Init+0x2f0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	43db      	mvns	r3, r3
 8002498:	693a      	ldr	r2, [r7, #16]
 800249a:	4013      	ands	r3, r2
 800249c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d003      	beq.n	80024b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80024b2:	4a10      	ldr	r2, [pc, #64]	; (80024f4 <HAL_GPIO_Init+0x2f0>)
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	3301      	adds	r3, #1
 80024bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f47f aea3 	bne.w	8002214 <HAL_GPIO_Init+0x10>
  }
}
 80024ce:	bf00      	nop
 80024d0:	bf00      	nop
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40010000 	.word	0x40010000
 80024e4:	48000400 	.word	0x48000400
 80024e8:	48000800 	.word	0x48000800
 80024ec:	48000c00 	.word	0x48000c00
 80024f0:	48001000 	.word	0x48001000
 80024f4:	40010400 	.word	0x40010400

080024f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]
 8002504:	4613      	mov	r3, r2
 8002506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002508:	787b      	ldrb	r3, [r7, #1]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800250e:	887a      	ldrh	r2, [r7, #2]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002514:	e002      	b.n	800251c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002516:	887a      	ldrh	r2, [r7, #2]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e08d      	b.n	8002656 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d106      	bne.n	8002554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f7fe fbbc 	bl	8000ccc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2224      	movs	r2, #36	; 0x24
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 0201 	bic.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002578:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	689a      	ldr	r2, [r3, #8]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002588:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d107      	bne.n	80025a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	e006      	b.n	80025b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80025ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d108      	bne.n	80025ca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	e007      	b.n	80025da <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685a      	ldr	r2, [r3, #4]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80025fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	691a      	ldr	r2, [r3, #16]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	430a      	orrs	r2, r1
 8002616:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	69d9      	ldr	r1, [r3, #28]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1a      	ldr	r2, [r3, #32]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2220      	movs	r2, #32
 8002642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3708      	adds	r7, #8
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}

0800265e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800265e:	b480      	push	{r7}
 8002660:	b083      	sub	sp, #12
 8002662:	af00      	add	r7, sp, #0
 8002664:	6078      	str	r0, [r7, #4]
 8002666:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800266e:	b2db      	uxtb	r3, r3
 8002670:	2b20      	cmp	r3, #32
 8002672:	d138      	bne.n	80026e6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800267e:	2302      	movs	r3, #2
 8002680:	e032      	b.n	80026e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2224      	movs	r2, #36	; 0x24
 800268e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f022 0201 	bic.w	r2, r2, #1
 80026a0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80026b0:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6819      	ldr	r1, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	683a      	ldr	r2, [r7, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f042 0201 	orr.w	r2, r2, #1
 80026d0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2220      	movs	r2, #32
 80026d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80026e2:	2300      	movs	r3, #0
 80026e4:	e000      	b.n	80026e8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80026e6:	2302      	movs	r3, #2
  }
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b20      	cmp	r3, #32
 8002708:	d139      	bne.n	800277e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002710:	2b01      	cmp	r3, #1
 8002712:	d101      	bne.n	8002718 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002714:	2302      	movs	r3, #2
 8002716:	e033      	b.n	8002780 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2224      	movs	r2, #36	; 0x24
 8002724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f022 0201 	bic.w	r2, r2, #1
 8002736:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002746:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	021b      	lsls	r3, r3, #8
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	4313      	orrs	r3, r2
 8002750:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f042 0201 	orr.w	r2, r2, #1
 8002768:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2220      	movs	r2, #32
 800276e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800277a:	2300      	movs	r3, #0
 800277c:	e000      	b.n	8002780 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800277e:	2302      	movs	r3, #2
  }
}
 8002780:	4618      	mov	r0, r3
 8002782:	3714      	adds	r7, #20
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr

0800278c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002792:	af00      	add	r7, sp, #0
 8002794:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002798:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800279c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800279e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027a2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d102      	bne.n	80027b2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	f001 b823 	b.w	80037f8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027b6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 817d 	beq.w	8002ac2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80027c8:	4bbc      	ldr	r3, [pc, #752]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f003 030c 	and.w	r3, r3, #12
 80027d0:	2b04      	cmp	r3, #4
 80027d2:	d00c      	beq.n	80027ee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80027d4:	4bb9      	ldr	r3, [pc, #740]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 030c 	and.w	r3, r3, #12
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d15c      	bne.n	800289a <HAL_RCC_OscConfig+0x10e>
 80027e0:	4bb6      	ldr	r3, [pc, #728]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ec:	d155      	bne.n	800289a <HAL_RCC_OscConfig+0x10e>
 80027ee:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027f2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027f6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80027fa:	fa93 f3a3 	rbit	r3, r3
 80027fe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002802:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	095b      	lsrs	r3, r3, #5
 800280e:	b2db      	uxtb	r3, r3
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b01      	cmp	r3, #1
 8002818:	d102      	bne.n	8002820 <HAL_RCC_OscConfig+0x94>
 800281a:	4ba8      	ldr	r3, [pc, #672]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	e015      	b.n	800284c <HAL_RCC_OscConfig+0xc0>
 8002820:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002824:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800282c:	fa93 f3a3 	rbit	r3, r3
 8002830:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002834:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002838:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800283c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002840:	fa93 f3a3 	rbit	r3, r3
 8002844:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002848:	4b9c      	ldr	r3, [pc, #624]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002850:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002854:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002858:	fa92 f2a2 	rbit	r2, r2
 800285c:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002860:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002864:	fab2 f282 	clz	r2, r2
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	f042 0220 	orr.w	r2, r2, #32
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	f002 021f 	and.w	r2, r2, #31
 8002874:	2101      	movs	r1, #1
 8002876:	fa01 f202 	lsl.w	r2, r1, r2
 800287a:	4013      	ands	r3, r2
 800287c:	2b00      	cmp	r3, #0
 800287e:	f000 811f 	beq.w	8002ac0 <HAL_RCC_OscConfig+0x334>
 8002882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002886:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	f040 8116 	bne.w	8002ac0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	f000 bfaf 	b.w	80037f8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800289a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800289e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x12e>
 80028ac:	4b83      	ldr	r3, [pc, #524]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a82      	ldr	r2, [pc, #520]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80028b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	e036      	b.n	8002928 <HAL_RCC_OscConfig+0x19c>
 80028ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10c      	bne.n	80028e4 <HAL_RCC_OscConfig+0x158>
 80028ca:	4b7c      	ldr	r3, [pc, #496]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a7b      	ldr	r2, [pc, #492]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80028d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d4:	6013      	str	r3, [r2, #0]
 80028d6:	4b79      	ldr	r3, [pc, #484]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a78      	ldr	r2, [pc, #480]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80028dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	e021      	b.n	8002928 <HAL_RCC_OscConfig+0x19c>
 80028e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028f4:	d10c      	bne.n	8002910 <HAL_RCC_OscConfig+0x184>
 80028f6:	4b71      	ldr	r3, [pc, #452]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a70      	ldr	r2, [pc, #448]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80028fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	4b6e      	ldr	r3, [pc, #440]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a6d      	ldr	r2, [pc, #436]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 8002908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	e00b      	b.n	8002928 <HAL_RCC_OscConfig+0x19c>
 8002910:	4b6a      	ldr	r3, [pc, #424]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a69      	ldr	r2, [pc, #420]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 8002916:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	4b67      	ldr	r3, [pc, #412]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a66      	ldr	r2, [pc, #408]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 8002922:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002926:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002928:	4b64      	ldr	r3, [pc, #400]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 800292a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292c:	f023 020f 	bic.w	r2, r3, #15
 8002930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002934:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	495f      	ldr	r1, [pc, #380]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 800293e:	4313      	orrs	r3, r2
 8002940:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002946:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d059      	beq.n	8002a06 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002952:	f7fe fbd9 	bl	8001108 <HAL_GetTick>
 8002956:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800295a:	e00a      	b.n	8002972 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800295c:	f7fe fbd4 	bl	8001108 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b64      	cmp	r3, #100	; 0x64
 800296a:	d902      	bls.n	8002972 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	f000 bf43 	b.w	80037f8 <HAL_RCC_OscConfig+0x106c>
 8002972:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002976:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800297e:	fa93 f3a3 	rbit	r3, r3
 8002982:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002986:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298a:	fab3 f383 	clz	r3, r3
 800298e:	b2db      	uxtb	r3, r3
 8002990:	095b      	lsrs	r3, r3, #5
 8002992:	b2db      	uxtb	r3, r3
 8002994:	f043 0301 	orr.w	r3, r3, #1
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b01      	cmp	r3, #1
 800299c:	d102      	bne.n	80029a4 <HAL_RCC_OscConfig+0x218>
 800299e:	4b47      	ldr	r3, [pc, #284]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	e015      	b.n	80029d0 <HAL_RCC_OscConfig+0x244>
 80029a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029a8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80029b0:	fa93 f3a3 	rbit	r3, r3
 80029b4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80029b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029bc:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80029c0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80029c4:	fa93 f3a3 	rbit	r3, r3
 80029c8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80029cc:	4b3b      	ldr	r3, [pc, #236]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029d4:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80029d8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80029dc:	fa92 f2a2 	rbit	r2, r2
 80029e0:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80029e4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80029e8:	fab2 f282 	clz	r2, r2
 80029ec:	b2d2      	uxtb	r2, r2
 80029ee:	f042 0220 	orr.w	r2, r2, #32
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	f002 021f 	and.w	r2, r2, #31
 80029f8:	2101      	movs	r1, #1
 80029fa:	fa01 f202 	lsl.w	r2, r1, r2
 80029fe:	4013      	ands	r3, r2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0ab      	beq.n	800295c <HAL_RCC_OscConfig+0x1d0>
 8002a04:	e05d      	b.n	8002ac2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a06:	f7fe fb7f 	bl	8001108 <HAL_GetTick>
 8002a0a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a0e:	e00a      	b.n	8002a26 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a10:	f7fe fb7a 	bl	8001108 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b64      	cmp	r3, #100	; 0x64
 8002a1e:	d902      	bls.n	8002a26 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	f000 bee9 	b.w	80037f8 <HAL_RCC_OscConfig+0x106c>
 8002a26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a2a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002a32:	fa93 f3a3 	rbit	r3, r3
 8002a36:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002a3a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3e:	fab3 f383 	clz	r3, r3
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	095b      	lsrs	r3, r3, #5
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	f043 0301 	orr.w	r3, r3, #1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d102      	bne.n	8002a58 <HAL_RCC_OscConfig+0x2cc>
 8002a52:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	e015      	b.n	8002a84 <HAL_RCC_OscConfig+0x2f8>
 8002a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a5c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002a6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a70:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002a74:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002a80:	4b0e      	ldr	r3, [pc, #56]	; (8002abc <HAL_RCC_OscConfig+0x330>)
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a88:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002a8c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002a90:	fa92 f2a2 	rbit	r2, r2
 8002a94:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002a98:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002a9c:	fab2 f282 	clz	r2, r2
 8002aa0:	b2d2      	uxtb	r2, r2
 8002aa2:	f042 0220 	orr.w	r2, r2, #32
 8002aa6:	b2d2      	uxtb	r2, r2
 8002aa8:	f002 021f 	and.w	r2, r2, #31
 8002aac:	2101      	movs	r1, #1
 8002aae:	fa01 f202 	lsl.w	r2, r1, r2
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d1ab      	bne.n	8002a10 <HAL_RCC_OscConfig+0x284>
 8002ab8:	e003      	b.n	8002ac2 <HAL_RCC_OscConfig+0x336>
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 817d 	beq.w	8002dd2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002ad8:	4ba6      	ldr	r3, [pc, #664]	; (8002d74 <HAL_RCC_OscConfig+0x5e8>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f003 030c 	and.w	r3, r3, #12
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00b      	beq.n	8002afc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002ae4:	4ba3      	ldr	r3, [pc, #652]	; (8002d74 <HAL_RCC_OscConfig+0x5e8>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 030c 	and.w	r3, r3, #12
 8002aec:	2b08      	cmp	r3, #8
 8002aee:	d172      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x44a>
 8002af0:	4ba0      	ldr	r3, [pc, #640]	; (8002d74 <HAL_RCC_OscConfig+0x5e8>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d16c      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x44a>
 8002afc:	2302      	movs	r3, #2
 8002afe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b02:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8002b06:	fa93 f3a3 	rbit	r3, r3
 8002b0a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002b0e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b12:	fab3 f383 	clz	r3, r3
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	095b      	lsrs	r3, r3, #5
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	f043 0301 	orr.w	r3, r3, #1
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d102      	bne.n	8002b2c <HAL_RCC_OscConfig+0x3a0>
 8002b26:	4b93      	ldr	r3, [pc, #588]	; (8002d74 <HAL_RCC_OscConfig+0x5e8>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	e013      	b.n	8002b54 <HAL_RCC_OscConfig+0x3c8>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b32:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8002b36:	fa93 f3a3 	rbit	r3, r3
 8002b3a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002b3e:	2302      	movs	r3, #2
 8002b40:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002b44:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b48:	fa93 f3a3 	rbit	r3, r3
 8002b4c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002b50:	4b88      	ldr	r3, [pc, #544]	; (8002d74 <HAL_RCC_OscConfig+0x5e8>)
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	2202      	movs	r2, #2
 8002b56:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002b5a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002b5e:	fa92 f2a2 	rbit	r2, r2
 8002b62:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8002b66:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002b6a:	fab2 f282 	clz	r2, r2
 8002b6e:	b2d2      	uxtb	r2, r2
 8002b70:	f042 0220 	orr.w	r2, r2, #32
 8002b74:	b2d2      	uxtb	r2, r2
 8002b76:	f002 021f 	and.w	r2, r2, #31
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b80:	4013      	ands	r3, r2
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00a      	beq.n	8002b9c <HAL_RCC_OscConfig+0x410>
 8002b86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d002      	beq.n	8002b9c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	f000 be2e 	b.w	80037f8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9c:	4b75      	ldr	r3, [pc, #468]	; (8002d74 <HAL_RCC_OscConfig+0x5e8>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ba8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	21f8      	movs	r1, #248	; 0xf8
 8002bb2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002bba:	fa91 f1a1 	rbit	r1, r1
 8002bbe:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002bc2:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8002bc6:	fab1 f181 	clz	r1, r1
 8002bca:	b2c9      	uxtb	r1, r1
 8002bcc:	408b      	lsls	r3, r1
 8002bce:	4969      	ldr	r1, [pc, #420]	; (8002d74 <HAL_RCC_OscConfig+0x5e8>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bd4:	e0fd      	b.n	8002dd2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 8088 	beq.w	8002cf8 <HAL_RCC_OscConfig+0x56c>
 8002be8:	2301      	movs	r3, #1
 8002bea:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002bf2:	fa93 f3a3 	rbit	r3, r3
 8002bf6:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8002bfa:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bfe:	fab3 f383 	clz	r3, r3
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	461a      	mov	r2, r3
 8002c10:	2301      	movs	r3, #1
 8002c12:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe fa78 	bl	8001108 <HAL_GetTick>
 8002c18:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c1c:	e00a      	b.n	8002c34 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c1e:	f7fe fa73 	bl	8001108 <HAL_GetTick>
 8002c22:	4602      	mov	r2, r0
 8002c24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d902      	bls.n	8002c34 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	f000 bde2 	b.w	80037f8 <HAL_RCC_OscConfig+0x106c>
 8002c34:	2302      	movs	r3, #2
 8002c36:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8002c46:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4a:	fab3 f383 	clz	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	095b      	lsrs	r3, r3, #5
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	f043 0301 	orr.w	r3, r3, #1
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d102      	bne.n	8002c64 <HAL_RCC_OscConfig+0x4d8>
 8002c5e:	4b45      	ldr	r3, [pc, #276]	; (8002d74 <HAL_RCC_OscConfig+0x5e8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	e013      	b.n	8002c8c <HAL_RCC_OscConfig+0x500>
 8002c64:	2302      	movs	r3, #2
 8002c66:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002c6e:	fa93 f3a3 	rbit	r3, r3
 8002c72:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002c76:	2302      	movs	r3, #2
 8002c78:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002c7c:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002c80:	fa93 f3a3 	rbit	r3, r3
 8002c84:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002c88:	4b3a      	ldr	r3, [pc, #232]	; (8002d74 <HAL_RCC_OscConfig+0x5e8>)
 8002c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002c92:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002c96:	fa92 f2a2 	rbit	r2, r2
 8002c9a:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002c9e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002ca2:	fab2 f282 	clz	r2, r2
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	f042 0220 	orr.w	r2, r2, #32
 8002cac:	b2d2      	uxtb	r2, r2
 8002cae:	f002 021f 	and.w	r2, r2, #31
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0af      	beq.n	8002c1e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cbe:	4b2d      	ldr	r3, [pc, #180]	; (8002d74 <HAL_RCC_OscConfig+0x5e8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cc6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	21f8      	movs	r1, #248	; 0xf8
 8002cd4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002cdc:	fa91 f1a1 	rbit	r1, r1
 8002ce0:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002ce4:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002ce8:	fab1 f181 	clz	r1, r1
 8002cec:	b2c9      	uxtb	r1, r1
 8002cee:	408b      	lsls	r3, r1
 8002cf0:	4920      	ldr	r1, [pc, #128]	; (8002d74 <HAL_RCC_OscConfig+0x5e8>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	600b      	str	r3, [r1, #0]
 8002cf6:	e06c      	b.n	8002dd2 <HAL_RCC_OscConfig+0x646>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002d0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d0e:	fab3 f383 	clz	r3, r3
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	461a      	mov	r2, r3
 8002d20:	2300      	movs	r3, #0
 8002d22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fe f9f0 	bl	8001108 <HAL_GetTick>
 8002d28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2c:	e00a      	b.n	8002d44 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d2e:	f7fe f9eb 	bl	8001108 <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d902      	bls.n	8002d44 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	f000 bd5a 	b.w	80037f8 <HAL_RCC_OscConfig+0x106c>
 8002d44:	2302      	movs	r3, #2
 8002d46:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002d56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d5a:	fab3 f383 	clz	r3, r3
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	095b      	lsrs	r3, r3, #5
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d104      	bne.n	8002d78 <HAL_RCC_OscConfig+0x5ec>
 8002d6e:	4b01      	ldr	r3, [pc, #4]	; (8002d74 <HAL_RCC_OscConfig+0x5e8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	e015      	b.n	8002da0 <HAL_RCC_OscConfig+0x614>
 8002d74:	40021000 	.word	0x40021000
 8002d78:	2302      	movs	r3, #2
 8002d7a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002d8a:	2302      	movs	r3, #2
 8002d8c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002d90:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002d94:	fa93 f3a3 	rbit	r3, r3
 8002d98:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002d9c:	4bc8      	ldr	r3, [pc, #800]	; (80030c0 <HAL_RCC_OscConfig+0x934>)
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	2202      	movs	r2, #2
 8002da2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002da6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002daa:	fa92 f2a2 	rbit	r2, r2
 8002dae:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002db2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002db6:	fab2 f282 	clz	r2, r2
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	f042 0220 	orr.w	r2, r2, #32
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	f002 021f 	and.w	r2, r2, #31
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8002dcc:	4013      	ands	r3, r2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1ad      	bne.n	8002d2e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dd6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	f000 8110 	beq.w	8003008 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002de8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	699b      	ldr	r3, [r3, #24]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d079      	beq.n	8002eec <HAL_RCC_OscConfig+0x760>
 8002df8:	2301      	movs	r3, #1
 8002dfa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002e02:	fa93 f3a3 	rbit	r3, r3
 8002e06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002e0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e0e:	fab3 f383 	clz	r3, r3
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	461a      	mov	r2, r3
 8002e16:	4bab      	ldr	r3, [pc, #684]	; (80030c4 <HAL_RCC_OscConfig+0x938>)
 8002e18:	4413      	add	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	2301      	movs	r3, #1
 8002e20:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e22:	f7fe f971 	bl	8001108 <HAL_GetTick>
 8002e26:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e2a:	e00a      	b.n	8002e42 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e2c:	f7fe f96c 	bl	8001108 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d902      	bls.n	8002e42 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	f000 bcdb 	b.w	80037f8 <HAL_RCC_OscConfig+0x106c>
 8002e42:	2302      	movs	r3, #2
 8002e44:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e48:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002e4c:	fa93 f3a3 	rbit	r3, r3
 8002e50:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002e54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e58:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	601a      	str	r2, [r3, #0]
 8002e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e64:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	fa93 f2a3 	rbit	r2, r3
 8002e6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002e76:	601a      	str	r2, [r3, #0]
 8002e78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e80:	2202      	movs	r2, #2
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	fa93 f2a3 	rbit	r2, r3
 8002e92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e96:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002e9a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9c:	4b88      	ldr	r3, [pc, #544]	; (80030c0 <HAL_RCC_OscConfig+0x934>)
 8002e9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ea0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ea4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002ea8:	2102      	movs	r1, #2
 8002eaa:	6019      	str	r1, [r3, #0]
 8002eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	fa93 f1a3 	rbit	r1, r3
 8002eba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ebe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ec2:	6019      	str	r1, [r3, #0]
  return result;
 8002ec4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ec8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	f003 031f 	and.w	r3, r3, #31
 8002ede:	2101      	movs	r1, #1
 8002ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d0a0      	beq.n	8002e2c <HAL_RCC_OscConfig+0x6a0>
 8002eea:	e08d      	b.n	8003008 <HAL_RCC_OscConfig+0x87c>
 8002eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efc:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	fa93 f2a3 	rbit	r2, r3
 8002f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002f0e:	601a      	str	r2, [r3, #0]
  return result;
 8002f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f14:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002f18:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f1a:	fab3 f383 	clz	r3, r3
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	461a      	mov	r2, r3
 8002f22:	4b68      	ldr	r3, [pc, #416]	; (80030c4 <HAL_RCC_OscConfig+0x938>)
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	461a      	mov	r2, r3
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f2e:	f7fe f8eb 	bl	8001108 <HAL_GetTick>
 8002f32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f36:	e00a      	b.n	8002f4e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f38:	f7fe f8e6 	bl	8001108 <HAL_GetTick>
 8002f3c:	4602      	mov	r2, r0
 8002f3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f42:	1ad3      	subs	r3, r2, r3
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d902      	bls.n	8002f4e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	f000 bc55 	b.w	80037f8 <HAL_RCC_OscConfig+0x106c>
 8002f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f52:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f56:	2202      	movs	r2, #2
 8002f58:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	fa93 f2a3 	rbit	r2, r3
 8002f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f76:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f7a:	2202      	movs	r2, #2
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f82:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	fa93 f2a3 	rbit	r2, r3
 8002f8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002f94:	601a      	str	r2, [r3, #0]
 8002f96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	601a      	str	r2, [r3, #0]
 8002fa2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	fa93 f2a3 	rbit	r2, r3
 8002fb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fb4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002fb8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fba:	4b41      	ldr	r3, [pc, #260]	; (80030c0 <HAL_RCC_OscConfig+0x934>)
 8002fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fc2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002fc6:	2102      	movs	r1, #2
 8002fc8:	6019      	str	r1, [r3, #0]
 8002fca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fce:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	fa93 f1a3 	rbit	r1, r3
 8002fd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fdc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002fe0:	6019      	str	r1, [r3, #0]
  return result;
 8002fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	fab3 f383 	clz	r3, r3
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8003002:	4013      	ands	r3, r2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d197      	bne.n	8002f38 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003008:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 81a1 	beq.w	8003360 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800301e:	2300      	movs	r3, #0
 8003020:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003024:	4b26      	ldr	r3, [pc, #152]	; (80030c0 <HAL_RCC_OscConfig+0x934>)
 8003026:	69db      	ldr	r3, [r3, #28]
 8003028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d116      	bne.n	800305e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003030:	4b23      	ldr	r3, [pc, #140]	; (80030c0 <HAL_RCC_OscConfig+0x934>)
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	4a22      	ldr	r2, [pc, #136]	; (80030c0 <HAL_RCC_OscConfig+0x934>)
 8003036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800303a:	61d3      	str	r3, [r2, #28]
 800303c:	4b20      	ldr	r3, [pc, #128]	; (80030c0 <HAL_RCC_OscConfig+0x934>)
 800303e:	69db      	ldr	r3, [r3, #28]
 8003040:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003044:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003048:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800304c:	601a      	str	r2, [r3, #0]
 800304e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003052:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003056:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003058:	2301      	movs	r3, #1
 800305a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800305e:	4b1a      	ldr	r3, [pc, #104]	; (80030c8 <HAL_RCC_OscConfig+0x93c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003066:	2b00      	cmp	r3, #0
 8003068:	d11a      	bne.n	80030a0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800306a:	4b17      	ldr	r3, [pc, #92]	; (80030c8 <HAL_RCC_OscConfig+0x93c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a16      	ldr	r2, [pc, #88]	; (80030c8 <HAL_RCC_OscConfig+0x93c>)
 8003070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003074:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003076:	f7fe f847 	bl	8001108 <HAL_GetTick>
 800307a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307e:	e009      	b.n	8003094 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003080:	f7fe f842 	bl	8001108 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b64      	cmp	r3, #100	; 0x64
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e3b1      	b.n	80037f8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003094:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <HAL_RCC_OscConfig+0x93c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0ef      	beq.n	8003080 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030a4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d10d      	bne.n	80030cc <HAL_RCC_OscConfig+0x940>
 80030b0:	4b03      	ldr	r3, [pc, #12]	; (80030c0 <HAL_RCC_OscConfig+0x934>)
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	4a02      	ldr	r2, [pc, #8]	; (80030c0 <HAL_RCC_OscConfig+0x934>)
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	6213      	str	r3, [r2, #32]
 80030bc:	e03c      	b.n	8003138 <HAL_RCC_OscConfig+0x9ac>
 80030be:	bf00      	nop
 80030c0:	40021000 	.word	0x40021000
 80030c4:	10908120 	.word	0x10908120
 80030c8:	40007000 	.word	0x40007000
 80030cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10c      	bne.n	80030f6 <HAL_RCC_OscConfig+0x96a>
 80030dc:	4bc1      	ldr	r3, [pc, #772]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	4ac0      	ldr	r2, [pc, #768]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	6213      	str	r3, [r2, #32]
 80030e8:	4bbe      	ldr	r3, [pc, #760]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 80030ea:	6a1b      	ldr	r3, [r3, #32]
 80030ec:	4abd      	ldr	r2, [pc, #756]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 80030ee:	f023 0304 	bic.w	r3, r3, #4
 80030f2:	6213      	str	r3, [r2, #32]
 80030f4:	e020      	b.n	8003138 <HAL_RCC_OscConfig+0x9ac>
 80030f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	2b05      	cmp	r3, #5
 8003104:	d10c      	bne.n	8003120 <HAL_RCC_OscConfig+0x994>
 8003106:	4bb7      	ldr	r3, [pc, #732]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	4ab6      	ldr	r2, [pc, #728]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 800310c:	f043 0304 	orr.w	r3, r3, #4
 8003110:	6213      	str	r3, [r2, #32]
 8003112:	4bb4      	ldr	r3, [pc, #720]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	4ab3      	ldr	r2, [pc, #716]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6213      	str	r3, [r2, #32]
 800311e:	e00b      	b.n	8003138 <HAL_RCC_OscConfig+0x9ac>
 8003120:	4bb0      	ldr	r3, [pc, #704]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	4aaf      	ldr	r2, [pc, #700]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 8003126:	f023 0301 	bic.w	r3, r3, #1
 800312a:	6213      	str	r3, [r2, #32]
 800312c:	4bad      	ldr	r3, [pc, #692]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	4aac      	ldr	r2, [pc, #688]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 8003132:	f023 0304 	bic.w	r3, r3, #4
 8003136:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800313c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 8081 	beq.w	800324c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314a:	f7fd ffdd 	bl	8001108 <HAL_GetTick>
 800314e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003152:	e00b      	b.n	800316c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003154:	f7fd ffd8 	bl	8001108 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	f241 3288 	movw	r2, #5000	; 0x1388
 8003164:	4293      	cmp	r3, r2
 8003166:	d901      	bls.n	800316c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003168:	2303      	movs	r3, #3
 800316a:	e345      	b.n	80037f8 <HAL_RCC_OscConfig+0x106c>
 800316c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003170:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003174:	2202      	movs	r2, #2
 8003176:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003178:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800317c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	fa93 f2a3 	rbit	r2, r3
 8003186:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800318a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003194:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003198:	2202      	movs	r2, #2
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031a0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	fa93 f2a3 	rbit	r2, r3
 80031aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ae:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80031b2:	601a      	str	r2, [r3, #0]
  return result;
 80031b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031b8:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80031bc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031be:	fab3 f383 	clz	r3, r3
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	095b      	lsrs	r3, r3, #5
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	f043 0302 	orr.w	r3, r3, #2
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d102      	bne.n	80031d8 <HAL_RCC_OscConfig+0xa4c>
 80031d2:	4b84      	ldr	r3, [pc, #528]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	e013      	b.n	8003200 <HAL_RCC_OscConfig+0xa74>
 80031d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031dc:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80031e0:	2202      	movs	r2, #2
 80031e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	fa93 f2a3 	rbit	r2, r3
 80031f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	4b79      	ldr	r3, [pc, #484]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003204:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003208:	2102      	movs	r1, #2
 800320a:	6011      	str	r1, [r2, #0]
 800320c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003210:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	fa92 f1a2 	rbit	r1, r2
 800321a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800321e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003222:	6011      	str	r1, [r2, #0]
  return result;
 8003224:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003228:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	fab2 f282 	clz	r2, r2
 8003232:	b2d2      	uxtb	r2, r2
 8003234:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003238:	b2d2      	uxtb	r2, r2
 800323a:	f002 021f 	and.w	r2, r2, #31
 800323e:	2101      	movs	r1, #1
 8003240:	fa01 f202 	lsl.w	r2, r1, r2
 8003244:	4013      	ands	r3, r2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d084      	beq.n	8003154 <HAL_RCC_OscConfig+0x9c8>
 800324a:	e07f      	b.n	800334c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800324c:	f7fd ff5c 	bl	8001108 <HAL_GetTick>
 8003250:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003254:	e00b      	b.n	800326e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003256:	f7fd ff57 	bl	8001108 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	f241 3288 	movw	r2, #5000	; 0x1388
 8003266:	4293      	cmp	r3, r2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e2c4      	b.n	80037f8 <HAL_RCC_OscConfig+0x106c>
 800326e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003272:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003276:	2202      	movs	r2, #2
 8003278:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800327e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	fa93 f2a3 	rbit	r2, r3
 8003288:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003290:	601a      	str	r2, [r3, #0]
 8003292:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003296:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800329a:	2202      	movs	r2, #2
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	fa93 f2a3 	rbit	r2, r3
 80032ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032b0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80032b4:	601a      	str	r2, [r3, #0]
  return result;
 80032b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ba:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80032be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c0:	fab3 f383 	clz	r3, r3
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	f043 0302 	orr.w	r3, r3, #2
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d102      	bne.n	80032da <HAL_RCC_OscConfig+0xb4e>
 80032d4:	4b43      	ldr	r3, [pc, #268]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 80032d6:	6a1b      	ldr	r3, [r3, #32]
 80032d8:	e013      	b.n	8003302 <HAL_RCC_OscConfig+0xb76>
 80032da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032de:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80032e2:	2202      	movs	r2, #2
 80032e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032ea:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	fa93 f2a3 	rbit	r2, r3
 80032f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	4b39      	ldr	r3, [pc, #228]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 8003300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003302:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003306:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800330a:	2102      	movs	r1, #2
 800330c:	6011      	str	r1, [r2, #0]
 800330e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003312:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003316:	6812      	ldr	r2, [r2, #0]
 8003318:	fa92 f1a2 	rbit	r1, r2
 800331c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003320:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003324:	6011      	str	r1, [r2, #0]
  return result;
 8003326:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800332a:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800332e:	6812      	ldr	r2, [r2, #0]
 8003330:	fab2 f282 	clz	r2, r2
 8003334:	b2d2      	uxtb	r2, r2
 8003336:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	f002 021f 	and.w	r2, r2, #31
 8003340:	2101      	movs	r1, #1
 8003342:	fa01 f202 	lsl.w	r2, r1, r2
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d184      	bne.n	8003256 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800334c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003350:	2b01      	cmp	r3, #1
 8003352:	d105      	bne.n	8003360 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003354:	4b23      	ldr	r3, [pc, #140]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	4a22      	ldr	r2, [pc, #136]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 800335a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800335e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003364:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69db      	ldr	r3, [r3, #28]
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8242 	beq.w	80037f6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003372:	4b1c      	ldr	r3, [pc, #112]	; (80033e4 <HAL_RCC_OscConfig+0xc58>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b08      	cmp	r3, #8
 800337c:	f000 8213 	beq.w	80037a6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003380:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003384:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69db      	ldr	r3, [r3, #28]
 800338c:	2b02      	cmp	r3, #2
 800338e:	f040 8162 	bne.w	8003656 <HAL_RCC_OscConfig+0xeca>
 8003392:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003396:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800339a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800339e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033a4:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	fa93 f2a3 	rbit	r2, r3
 80033ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033b2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80033b6:	601a      	str	r2, [r3, #0]
  return result;
 80033b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033bc:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80033c0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c2:	fab3 f383 	clz	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80033cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	461a      	mov	r2, r3
 80033d4:	2300      	movs	r3, #0
 80033d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d8:	f7fd fe96 	bl	8001108 <HAL_GetTick>
 80033dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033e0:	e00c      	b.n	80033fc <HAL_RCC_OscConfig+0xc70>
 80033e2:	bf00      	nop
 80033e4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e8:	f7fd fe8e 	bl	8001108 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e1fd      	b.n	80037f8 <HAL_RCC_OscConfig+0x106c>
 80033fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003400:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003404:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003408:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340e:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	fa93 f2a3 	rbit	r2, r3
 8003418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800341c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003420:	601a      	str	r2, [r3, #0]
  return result;
 8003422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003426:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800342a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800342c:	fab3 f383 	clz	r3, r3
 8003430:	b2db      	uxtb	r3, r3
 8003432:	095b      	lsrs	r3, r3, #5
 8003434:	b2db      	uxtb	r3, r3
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b01      	cmp	r3, #1
 800343e:	d102      	bne.n	8003446 <HAL_RCC_OscConfig+0xcba>
 8003440:	4bb0      	ldr	r3, [pc, #704]	; (8003704 <HAL_RCC_OscConfig+0xf78>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	e027      	b.n	8003496 <HAL_RCC_OscConfig+0xd0a>
 8003446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344a:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800344e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003452:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003458:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	fa93 f2a3 	rbit	r2, r3
 8003462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003466:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800346a:	601a      	str	r2, [r3, #0]
 800346c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003470:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003474:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003478:	601a      	str	r2, [r3, #0]
 800347a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800347e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	fa93 f2a3 	rbit	r2, r3
 8003488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003490:	601a      	str	r2, [r3, #0]
 8003492:	4b9c      	ldr	r3, [pc, #624]	; (8003704 <HAL_RCC_OscConfig+0xf78>)
 8003494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003496:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800349a:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800349e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034a2:	6011      	str	r1, [r2, #0]
 80034a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034a8:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80034ac:	6812      	ldr	r2, [r2, #0]
 80034ae:	fa92 f1a2 	rbit	r1, r2
 80034b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034b6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80034ba:	6011      	str	r1, [r2, #0]
  return result;
 80034bc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034c0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80034c4:	6812      	ldr	r2, [r2, #0]
 80034c6:	fab2 f282 	clz	r2, r2
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	f042 0220 	orr.w	r2, r2, #32
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	f002 021f 	and.w	r2, r2, #31
 80034d6:	2101      	movs	r1, #1
 80034d8:	fa01 f202 	lsl.w	r2, r1, r2
 80034dc:	4013      	ands	r3, r2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d182      	bne.n	80033e8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034e2:	4b88      	ldr	r3, [pc, #544]	; (8003704 <HAL_RCC_OscConfig+0xf78>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80034ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80034f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	430b      	orrs	r3, r1
 8003504:	497f      	ldr	r1, [pc, #508]	; (8003704 <HAL_RCC_OscConfig+0xf78>)
 8003506:	4313      	orrs	r3, r2
 8003508:	604b      	str	r3, [r1, #4]
 800350a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350e:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003512:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003516:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	fa93 f2a3 	rbit	r2, r3
 8003526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800352a:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 800352e:	601a      	str	r2, [r3, #0]
  return result;
 8003530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003534:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003538:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800353a:	fab3 f383 	clz	r3, r3
 800353e:	b2db      	uxtb	r3, r3
 8003540:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003544:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	461a      	mov	r2, r3
 800354c:	2301      	movs	r3, #1
 800354e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003550:	f7fd fdda 	bl	8001108 <HAL_GetTick>
 8003554:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003558:	e009      	b.n	800356e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800355a:	f7fd fdd5 	bl	8001108 <HAL_GetTick>
 800355e:	4602      	mov	r2, r0
 8003560:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b02      	cmp	r3, #2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e144      	b.n	80037f8 <HAL_RCC_OscConfig+0x106c>
 800356e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003572:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003576:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800357a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003580:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	fa93 f2a3 	rbit	r2, r3
 800358a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800358e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003592:	601a      	str	r2, [r3, #0]
  return result;
 8003594:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003598:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800359c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800359e:	fab3 f383 	clz	r3, r3
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	095b      	lsrs	r3, r3, #5
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	f043 0301 	orr.w	r3, r3, #1
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d102      	bne.n	80035b8 <HAL_RCC_OscConfig+0xe2c>
 80035b2:	4b54      	ldr	r3, [pc, #336]	; (8003704 <HAL_RCC_OscConfig+0xf78>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	e027      	b.n	8003608 <HAL_RCC_OscConfig+0xe7c>
 80035b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035bc:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80035c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ca:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	fa93 f2a3 	rbit	r2, r3
 80035d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035d8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80035dc:	601a      	str	r2, [r3, #0]
 80035de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e2:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80035e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80035ea:	601a      	str	r2, [r3, #0]
 80035ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f0:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	fa93 f2a3 	rbit	r2, r3
 80035fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035fe:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	4b3f      	ldr	r3, [pc, #252]	; (8003704 <HAL_RCC_OscConfig+0xf78>)
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800360c:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003610:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003614:	6011      	str	r1, [r2, #0]
 8003616:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800361a:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 800361e:	6812      	ldr	r2, [r2, #0]
 8003620:	fa92 f1a2 	rbit	r1, r2
 8003624:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003628:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800362c:	6011      	str	r1, [r2, #0]
  return result;
 800362e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003632:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	fab2 f282 	clz	r2, r2
 800363c:	b2d2      	uxtb	r2, r2
 800363e:	f042 0220 	orr.w	r2, r2, #32
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	f002 021f 	and.w	r2, r2, #31
 8003648:	2101      	movs	r1, #1
 800364a:	fa01 f202 	lsl.w	r2, r1, r2
 800364e:	4013      	ands	r3, r2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d082      	beq.n	800355a <HAL_RCC_OscConfig+0xdce>
 8003654:	e0cf      	b.n	80037f6 <HAL_RCC_OscConfig+0x106a>
 8003656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800365a:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800365e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003662:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003668:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	fa93 f2a3 	rbit	r2, r3
 8003672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003676:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800367a:	601a      	str	r2, [r3, #0]
  return result;
 800367c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003680:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003684:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003686:	fab3 f383 	clz	r3, r3
 800368a:	b2db      	uxtb	r3, r3
 800368c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003690:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	461a      	mov	r2, r3
 8003698:	2300      	movs	r3, #0
 800369a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369c:	f7fd fd34 	bl	8001108 <HAL_GetTick>
 80036a0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a4:	e009      	b.n	80036ba <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036a6:	f7fd fd2f 	bl	8001108 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e09e      	b.n	80037f8 <HAL_RCC_OscConfig+0x106c>
 80036ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036be:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80036c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036cc:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	fa93 f2a3 	rbit	r2, r3
 80036d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036da:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036de:	601a      	str	r2, [r3, #0]
  return result;
 80036e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036e4:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80036e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ea:	fab3 f383 	clz	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	f043 0301 	orr.w	r3, r3, #1
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d104      	bne.n	8003708 <HAL_RCC_OscConfig+0xf7c>
 80036fe:	4b01      	ldr	r3, [pc, #4]	; (8003704 <HAL_RCC_OscConfig+0xf78>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	e029      	b.n	8003758 <HAL_RCC_OscConfig+0xfcc>
 8003704:	40021000 	.word	0x40021000
 8003708:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800370c:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003710:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003714:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800371a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	fa93 f2a3 	rbit	r2, r3
 8003724:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003728:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003732:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003736:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800373a:	601a      	str	r2, [r3, #0]
 800373c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003740:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	fa93 f2a3 	rbit	r2, r3
 800374a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800374e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003752:	601a      	str	r2, [r3, #0]
 8003754:	4b2b      	ldr	r3, [pc, #172]	; (8003804 <HAL_RCC_OscConfig+0x1078>)
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800375c:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003760:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003764:	6011      	str	r1, [r2, #0]
 8003766:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800376a:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800376e:	6812      	ldr	r2, [r2, #0]
 8003770:	fa92 f1a2 	rbit	r1, r2
 8003774:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003778:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 800377c:	6011      	str	r1, [r2, #0]
  return result;
 800377e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003782:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	fab2 f282 	clz	r2, r2
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	f042 0220 	orr.w	r2, r2, #32
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	f002 021f 	and.w	r2, r2, #31
 8003798:	2101      	movs	r1, #1
 800379a:	fa01 f202 	lsl.w	r2, r1, r2
 800379e:	4013      	ands	r3, r2
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d180      	bne.n	80036a6 <HAL_RCC_OscConfig+0xf1a>
 80037a4:	e027      	b.n	80037f6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037aa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d101      	bne.n	80037ba <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e01e      	b.n	80037f8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037ba:	4b12      	ldr	r3, [pc, #72]	; (8003804 <HAL_RCC_OscConfig+0x1078>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037c6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80037ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d10b      	bne.n	80037f2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80037da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80037de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80037e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d001      	beq.n	80037f6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e000      	b.n	80037f8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	40021000 	.word	0x40021000

08003808 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b09e      	sub	sp, #120	; 0x78
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003812:	2300      	movs	r3, #0
 8003814:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d101      	bne.n	8003820 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e162      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003820:	4b90      	ldr	r3, [pc, #576]	; (8003a64 <HAL_RCC_ClockConfig+0x25c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	429a      	cmp	r2, r3
 800382c:	d910      	bls.n	8003850 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800382e:	4b8d      	ldr	r3, [pc, #564]	; (8003a64 <HAL_RCC_ClockConfig+0x25c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 0207 	bic.w	r2, r3, #7
 8003836:	498b      	ldr	r1, [pc, #556]	; (8003a64 <HAL_RCC_ClockConfig+0x25c>)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	4313      	orrs	r3, r2
 800383c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800383e:	4b89      	ldr	r3, [pc, #548]	; (8003a64 <HAL_RCC_ClockConfig+0x25c>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	683a      	ldr	r2, [r7, #0]
 8003848:	429a      	cmp	r2, r3
 800384a:	d001      	beq.n	8003850 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e14a      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d008      	beq.n	800386e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800385c:	4b82      	ldr	r3, [pc, #520]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	497f      	ldr	r1, [pc, #508]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 800386a:	4313      	orrs	r3, r2
 800386c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0301 	and.w	r3, r3, #1
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 80dc 	beq.w	8003a34 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d13c      	bne.n	80038fe <HAL_RCC_ClockConfig+0xf6>
 8003884:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003888:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800388a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800388c:	fa93 f3a3 	rbit	r3, r3
 8003890:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003894:	fab3 f383 	clz	r3, r3
 8003898:	b2db      	uxtb	r3, r3
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	b2db      	uxtb	r3, r3
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d102      	bne.n	80038ae <HAL_RCC_ClockConfig+0xa6>
 80038a8:	4b6f      	ldr	r3, [pc, #444]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	e00f      	b.n	80038ce <HAL_RCC_ClockConfig+0xc6>
 80038ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038b2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038b6:	fa93 f3a3 	rbit	r3, r3
 80038ba:	667b      	str	r3, [r7, #100]	; 0x64
 80038bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038c0:	663b      	str	r3, [r7, #96]	; 0x60
 80038c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038c4:	fa93 f3a3 	rbit	r3, r3
 80038c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038ca:	4b67      	ldr	r3, [pc, #412]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80038cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80038d2:	65ba      	str	r2, [r7, #88]	; 0x58
 80038d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80038d6:	fa92 f2a2 	rbit	r2, r2
 80038da:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80038dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038de:	fab2 f282 	clz	r2, r2
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	f042 0220 	orr.w	r2, r2, #32
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	f002 021f 	and.w	r2, r2, #31
 80038ee:	2101      	movs	r1, #1
 80038f0:	fa01 f202 	lsl.w	r2, r1, r2
 80038f4:	4013      	ands	r3, r2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d17b      	bne.n	80039f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e0f3      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d13c      	bne.n	8003980 <HAL_RCC_ClockConfig+0x178>
 8003906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800390a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800390e:	fa93 f3a3 	rbit	r3, r3
 8003912:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003914:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003916:	fab3 f383 	clz	r3, r3
 800391a:	b2db      	uxtb	r3, r3
 800391c:	095b      	lsrs	r3, r3, #5
 800391e:	b2db      	uxtb	r3, r3
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b01      	cmp	r3, #1
 8003928:	d102      	bne.n	8003930 <HAL_RCC_ClockConfig+0x128>
 800392a:	4b4f      	ldr	r3, [pc, #316]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	e00f      	b.n	8003950 <HAL_RCC_ClockConfig+0x148>
 8003930:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003934:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003938:	fa93 f3a3 	rbit	r3, r3
 800393c:	647b      	str	r3, [r7, #68]	; 0x44
 800393e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003942:	643b      	str	r3, [r7, #64]	; 0x40
 8003944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003946:	fa93 f3a3 	rbit	r3, r3
 800394a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800394c:	4b46      	ldr	r3, [pc, #280]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 800394e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003950:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003954:	63ba      	str	r2, [r7, #56]	; 0x38
 8003956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003958:	fa92 f2a2 	rbit	r2, r2
 800395c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800395e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003960:	fab2 f282 	clz	r2, r2
 8003964:	b2d2      	uxtb	r2, r2
 8003966:	f042 0220 	orr.w	r2, r2, #32
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	f002 021f 	and.w	r2, r2, #31
 8003970:	2101      	movs	r1, #1
 8003972:	fa01 f202 	lsl.w	r2, r1, r2
 8003976:	4013      	ands	r3, r2
 8003978:	2b00      	cmp	r3, #0
 800397a:	d13a      	bne.n	80039f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e0b2      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x2de>
 8003980:	2302      	movs	r3, #2
 8003982:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003986:	fa93 f3a3 	rbit	r3, r3
 800398a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800398c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398e:	fab3 f383 	clz	r3, r3
 8003992:	b2db      	uxtb	r3, r3
 8003994:	095b      	lsrs	r3, r3, #5
 8003996:	b2db      	uxtb	r3, r3
 8003998:	f043 0301 	orr.w	r3, r3, #1
 800399c:	b2db      	uxtb	r3, r3
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d102      	bne.n	80039a8 <HAL_RCC_ClockConfig+0x1a0>
 80039a2:	4b31      	ldr	r3, [pc, #196]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	e00d      	b.n	80039c4 <HAL_RCC_ClockConfig+0x1bc>
 80039a8:	2302      	movs	r3, #2
 80039aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ae:	fa93 f3a3 	rbit	r3, r3
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
 80039b4:	2302      	movs	r3, #2
 80039b6:	623b      	str	r3, [r7, #32]
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	fa93 f3a3 	rbit	r3, r3
 80039be:	61fb      	str	r3, [r7, #28]
 80039c0:	4b29      	ldr	r3, [pc, #164]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	2202      	movs	r2, #2
 80039c6:	61ba      	str	r2, [r7, #24]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	fa92 f2a2 	rbit	r2, r2
 80039ce:	617a      	str	r2, [r7, #20]
  return result;
 80039d0:	697a      	ldr	r2, [r7, #20]
 80039d2:	fab2 f282 	clz	r2, r2
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	f042 0220 	orr.w	r2, r2, #32
 80039dc:	b2d2      	uxtb	r2, r2
 80039de:	f002 021f 	and.w	r2, r2, #31
 80039e2:	2101      	movs	r1, #1
 80039e4:	fa01 f202 	lsl.w	r2, r1, r2
 80039e8:	4013      	ands	r3, r2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e079      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039f2:	4b1d      	ldr	r3, [pc, #116]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f023 0203 	bic.w	r2, r3, #3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	491a      	ldr	r1, [pc, #104]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a04:	f7fd fb80 	bl	8001108 <HAL_GetTick>
 8003a08:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a0a:	e00a      	b.n	8003a22 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a0c:	f7fd fb7c 	bl	8001108 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e061      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a22:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <HAL_RCC_ClockConfig+0x260>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 020c 	and.w	r2, r3, #12
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d1eb      	bne.n	8003a0c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a34:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <HAL_RCC_ClockConfig+0x25c>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d214      	bcs.n	8003a6c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a42:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <HAL_RCC_ClockConfig+0x25c>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f023 0207 	bic.w	r2, r3, #7
 8003a4a:	4906      	ldr	r1, [pc, #24]	; (8003a64 <HAL_RCC_ClockConfig+0x25c>)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a52:	4b04      	ldr	r3, [pc, #16]	; (8003a64 <HAL_RCC_ClockConfig+0x25c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d005      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e040      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x2de>
 8003a64:	40022000 	.word	0x40022000
 8003a68:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0304 	and.w	r3, r3, #4
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a78:	4b1d      	ldr	r3, [pc, #116]	; (8003af0 <HAL_RCC_ClockConfig+0x2e8>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68db      	ldr	r3, [r3, #12]
 8003a84:	491a      	ldr	r1, [pc, #104]	; (8003af0 <HAL_RCC_ClockConfig+0x2e8>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0308 	and.w	r3, r3, #8
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d009      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a96:	4b16      	ldr	r3, [pc, #88]	; (8003af0 <HAL_RCC_ClockConfig+0x2e8>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	691b      	ldr	r3, [r3, #16]
 8003aa2:	00db      	lsls	r3, r3, #3
 8003aa4:	4912      	ldr	r1, [pc, #72]	; (8003af0 <HAL_RCC_ClockConfig+0x2e8>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003aaa:	f000 f829 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 8003aae:	4601      	mov	r1, r0
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <HAL_RCC_ClockConfig+0x2e8>)
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ab8:	22f0      	movs	r2, #240	; 0xf0
 8003aba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	fa92 f2a2 	rbit	r2, r2
 8003ac2:	60fa      	str	r2, [r7, #12]
  return result;
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	fab2 f282 	clz	r2, r2
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	40d3      	lsrs	r3, r2
 8003ace:	4a09      	ldr	r2, [pc, #36]	; (8003af4 <HAL_RCC_ClockConfig+0x2ec>)
 8003ad0:	5cd3      	ldrb	r3, [r2, r3]
 8003ad2:	fa21 f303 	lsr.w	r3, r1, r3
 8003ad6:	4a08      	ldr	r2, [pc, #32]	; (8003af8 <HAL_RCC_ClockConfig+0x2f0>)
 8003ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003ada:	4b08      	ldr	r3, [pc, #32]	; (8003afc <HAL_RCC_ClockConfig+0x2f4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7fd face 	bl	8001080 <HAL_InitTick>
  
  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3778      	adds	r7, #120	; 0x78
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40021000 	.word	0x40021000
 8003af4:	08004f14 	.word	0x08004f14
 8003af8:	20000000 	.word	0x20000000
 8003afc:	20000004 	.word	0x20000004

08003b00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b087      	sub	sp, #28
 8003b04:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60bb      	str	r3, [r7, #8]
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	2300      	movs	r3, #0
 8003b14:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b16:	2300      	movs	r3, #0
 8003b18:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003b1a:	4b1e      	ldr	r3, [pc, #120]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 030c 	and.w	r3, r3, #12
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d002      	beq.n	8003b30 <HAL_RCC_GetSysClockFreq+0x30>
 8003b2a:	2b08      	cmp	r3, #8
 8003b2c:	d003      	beq.n	8003b36 <HAL_RCC_GetSysClockFreq+0x36>
 8003b2e:	e026      	b.n	8003b7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b30:	4b19      	ldr	r3, [pc, #100]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b32:	613b      	str	r3, [r7, #16]
      break;
 8003b34:	e026      	b.n	8003b84 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	0c9b      	lsrs	r3, r3, #18
 8003b3a:	f003 030f 	and.w	r3, r3, #15
 8003b3e:	4a17      	ldr	r2, [pc, #92]	; (8003b9c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003b40:	5cd3      	ldrb	r3, [r2, r3]
 8003b42:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003b44:	4b13      	ldr	r3, [pc, #76]	; (8003b94 <HAL_RCC_GetSysClockFreq+0x94>)
 8003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b48:	f003 030f 	and.w	r3, r3, #15
 8003b4c:	4a14      	ldr	r2, [pc, #80]	; (8003ba0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b4e:	5cd3      	ldrb	r3, [r2, r3]
 8003b50:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b5c:	4a0e      	ldr	r2, [pc, #56]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	e004      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a0c      	ldr	r2, [pc, #48]	; (8003ba4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b72:	fb02 f303 	mul.w	r3, r2, r3
 8003b76:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	613b      	str	r3, [r7, #16]
      break;
 8003b7c:	e002      	b.n	8003b84 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b7e:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b80:	613b      	str	r3, [r7, #16]
      break;
 8003b82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b84:	693b      	ldr	r3, [r7, #16]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	371c      	adds	r7, #28
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr
 8003b92:	bf00      	nop
 8003b94:	40021000 	.word	0x40021000
 8003b98:	007a1200 	.word	0x007a1200
 8003b9c:	08004f24 	.word	0x08004f24
 8003ba0:	08004f34 	.word	0x08004f34
 8003ba4:	003d0900 	.word	0x003d0900

08003ba8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b092      	sub	sp, #72	; 0x48
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 80d4 	beq.w	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bcc:	4b4e      	ldr	r3, [pc, #312]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bce:	69db      	ldr	r3, [r3, #28]
 8003bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10e      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd8:	4b4b      	ldr	r3, [pc, #300]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	4a4a      	ldr	r2, [pc, #296]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be2:	61d3      	str	r3, [r2, #28]
 8003be4:	4b48      	ldr	r3, [pc, #288]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bec:	60bb      	str	r3, [r7, #8]
 8003bee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf6:	4b45      	ldr	r3, [pc, #276]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d118      	bne.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c02:	4b42      	ldr	r3, [pc, #264]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a41      	ldr	r2, [pc, #260]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c0c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c0e:	f7fd fa7b 	bl	8001108 <HAL_GetTick>
 8003c12:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c14:	e008      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c16:	f7fd fa77 	bl	8001108 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b64      	cmp	r3, #100	; 0x64
 8003c22:	d901      	bls.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e169      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c28:	4b38      	ldr	r3, [pc, #224]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c34:	4b34      	ldr	r3, [pc, #208]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 8084 	beq.w	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d07c      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c54:	4b2c      	ldr	r3, [pc, #176]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	fa93 f3a3 	rbit	r3, r3
 8003c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c6e:	fab3 f383 	clz	r3, r3
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	461a      	mov	r2, r3
 8003c76:	4b26      	ldr	r3, [pc, #152]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c78:	4413      	add	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	2301      	movs	r3, #1
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c86:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8a:	fa93 f3a3 	rbit	r3, r3
 8003c8e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c92:	fab3 f383 	clz	r3, r3
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	4b1d      	ldr	r3, [pc, #116]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003c9c:	4413      	add	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ca6:	4a18      	ldr	r2, [pc, #96]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003caa:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d04b      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb6:	f7fd fa27 	bl	8001108 <HAL_GetTick>
 8003cba:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cbc:	e00a      	b.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cbe:	f7fd fa23 	bl	8001108 <HAL_GetTick>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cc6:	1ad3      	subs	r3, r2, r3
 8003cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d901      	bls.n	8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e113      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x354>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cda:	fa93 f3a3 	rbit	r3, r3
 8003cde:	627b      	str	r3, [r7, #36]	; 0x24
 8003ce0:	2302      	movs	r3, #2
 8003ce2:	623b      	str	r3, [r7, #32]
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	fa93 f3a3 	rbit	r3, r3
 8003cea:	61fb      	str	r3, [r7, #28]
  return result;
 8003cec:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cee:	fab3 f383 	clz	r3, r3
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	095b      	lsrs	r3, r3, #5
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	f043 0302 	orr.w	r3, r3, #2
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d108      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003d02:	4b01      	ldr	r3, [pc, #4]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	e00d      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	40007000 	.word	0x40007000
 8003d10:	10908100 	.word	0x10908100
 8003d14:	2302      	movs	r3, #2
 8003d16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	fa93 f3a3 	rbit	r3, r3
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	4b78      	ldr	r3, [pc, #480]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d24:	2202      	movs	r2, #2
 8003d26:	613a      	str	r2, [r7, #16]
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	fa92 f2a2 	rbit	r2, r2
 8003d2e:	60fa      	str	r2, [r7, #12]
  return result;
 8003d30:	68fa      	ldr	r2, [r7, #12]
 8003d32:	fab2 f282 	clz	r2, r2
 8003d36:	b2d2      	uxtb	r2, r2
 8003d38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	f002 021f 	and.w	r2, r2, #31
 8003d42:	2101      	movs	r1, #1
 8003d44:	fa01 f202 	lsl.w	r2, r1, r2
 8003d48:	4013      	ands	r3, r2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0b7      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003d4e:	4b6d      	ldr	r3, [pc, #436]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	496a      	ldr	r1, [pc, #424]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d60:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d105      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d68:	4b66      	ldr	r3, [pc, #408]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d6a:	69db      	ldr	r3, [r3, #28]
 8003d6c:	4a65      	ldr	r2, [pc, #404]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d72:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d008      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d80:	4b60      	ldr	r3, [pc, #384]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d84:	f023 0203 	bic.w	r2, r3, #3
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	495d      	ldr	r1, [pc, #372]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d008      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d9e:	4b59      	ldr	r3, [pc, #356]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	4956      	ldr	r1, [pc, #344]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dac:	4313      	orrs	r3, r2
 8003dae:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0304 	and.w	r3, r3, #4
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d008      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003dbc:	4b51      	ldr	r3, [pc, #324]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	494e      	ldr	r1, [pc, #312]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0320 	and.w	r3, r3, #32
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d008      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003dda:	4b4a      	ldr	r3, [pc, #296]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dde:	f023 0210 	bic.w	r2, r3, #16
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	69db      	ldr	r3, [r3, #28]
 8003de6:	4947      	ldr	r1, [pc, #284]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003de8:	4313      	orrs	r3, r2
 8003dea:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d008      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003df8:	4b42      	ldr	r3, [pc, #264]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e04:	493f      	ldr	r1, [pc, #252]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d008      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003e16:	4b3b      	ldr	r3, [pc, #236]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1a:	f023 0220 	bic.w	r2, r3, #32
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	4938      	ldr	r1, [pc, #224]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0308 	and.w	r3, r3, #8
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d008      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e34:	4b33      	ldr	r3, [pc, #204]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	4930      	ldr	r1, [pc, #192]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0310 	and.w	r3, r3, #16
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d008      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e52:	4b2c      	ldr	r3, [pc, #176]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	4929      	ldr	r1, [pc, #164]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d008      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003e70:	4b24      	ldr	r3, [pc, #144]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	4921      	ldr	r1, [pc, #132]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d008      	beq.n	8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e8e:	4b1d      	ldr	r3, [pc, #116]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e92:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	491a      	ldr	r1, [pc, #104]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d008      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003eac:	4b15      	ldr	r3, [pc, #84]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb0:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003eb8:	4912      	ldr	r1, [pc, #72]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d008      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003eca:	4b0e      	ldr	r3, [pc, #56]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ece:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	490b      	ldr	r1, [pc, #44]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d008      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003ee8:	4b06      	ldr	r3, [pc, #24]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eec:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ef4:	4903      	ldr	r1, [pc, #12]	; (8003f04 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3748      	adds	r7, #72	; 0x48
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	40021000 	.word	0x40021000

08003f08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d101      	bne.n	8003f1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e09d      	b.n	8004056 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d108      	bne.n	8003f34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f2a:	d009      	beq.n	8003f40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	61da      	str	r2, [r3, #28]
 8003f32:	e005      	b.n	8003f40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d106      	bne.n	8003f60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7fc fefa 	bl	8000d54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003f80:	d902      	bls.n	8003f88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]
 8003f86:	e002      	b.n	8003f8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003f8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003f96:	d007      	beq.n	8003fa8 <HAL_SPI_Init+0xa0>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fa0:	d002      	beq.n	8003fa8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	695b      	ldr	r3, [r3, #20]
 8003fc8:	f003 0301 	and.w	r3, r3, #1
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fd6:	431a      	orrs	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	69db      	ldr	r3, [r3, #28]
 8003fdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fea:	ea42 0103 	orr.w	r1, r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	699b      	ldr	r3, [r3, #24]
 8004002:	0c1b      	lsrs	r3, r3, #16
 8004004:	f003 0204 	and.w	r2, r3, #4
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	f003 0310 	and.w	r3, r3, #16
 8004010:	431a      	orrs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	431a      	orrs	r2, r3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004024:	ea42 0103 	orr.w	r1, r2, r3
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	430a      	orrs	r2, r1
 8004034:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69da      	ldr	r2, [r3, #28]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004044:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b082      	sub	sp, #8
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e049      	b.n	8004104 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b00      	cmp	r3, #0
 800407a:	d106      	bne.n	800408a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7fc fec5 	bl	8000e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2202      	movs	r2, #2
 800408e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	3304      	adds	r3, #4
 800409a:	4619      	mov	r1, r3
 800409c:	4610      	mov	r0, r2
 800409e:	f000 fa75 	bl	800458c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2201      	movs	r2, #1
 80040c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2201      	movs	r2, #1
 80040de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2201      	movs	r2, #1
 80040ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b082      	sub	sp, #8
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d101      	bne.n	800411e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e049      	b.n	80041b2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d106      	bne.n	8004138 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f841 	bl	80041ba <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3304      	adds	r3, #4
 8004148:	4619      	mov	r1, r3
 800414a:	4610      	mov	r0, r2
 800414c:	f000 fa1e 	bl	800458c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2201      	movs	r2, #1
 8004154:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041b0:	2300      	movs	r3, #0
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b083      	sub	sp, #12
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
	...

080041d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b086      	sub	sp, #24
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	60f8      	str	r0, [r7, #12]
 80041d8:	60b9      	str	r1, [r7, #8]
 80041da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041dc:	2300      	movs	r3, #0
 80041de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d101      	bne.n	80041ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80041ea:	2302      	movs	r3, #2
 80041ec:	e0ff      	b.n	80043ee <HAL_TIM_PWM_ConfigChannel+0x21e>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b14      	cmp	r3, #20
 80041fa:	f200 80f0 	bhi.w	80043de <HAL_TIM_PWM_ConfigChannel+0x20e>
 80041fe:	a201      	add	r2, pc, #4	; (adr r2, 8004204 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004204:	08004259 	.word	0x08004259
 8004208:	080043df 	.word	0x080043df
 800420c:	080043df 	.word	0x080043df
 8004210:	080043df 	.word	0x080043df
 8004214:	08004299 	.word	0x08004299
 8004218:	080043df 	.word	0x080043df
 800421c:	080043df 	.word	0x080043df
 8004220:	080043df 	.word	0x080043df
 8004224:	080042db 	.word	0x080042db
 8004228:	080043df 	.word	0x080043df
 800422c:	080043df 	.word	0x080043df
 8004230:	080043df 	.word	0x080043df
 8004234:	0800431b 	.word	0x0800431b
 8004238:	080043df 	.word	0x080043df
 800423c:	080043df 	.word	0x080043df
 8004240:	080043df 	.word	0x080043df
 8004244:	0800435d 	.word	0x0800435d
 8004248:	080043df 	.word	0x080043df
 800424c:	080043df 	.word	0x080043df
 8004250:	080043df 	.word	0x080043df
 8004254:	0800439d 	.word	0x0800439d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68b9      	ldr	r1, [r7, #8]
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fa30 	bl	80046c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699a      	ldr	r2, [r3, #24]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f042 0208 	orr.w	r2, r2, #8
 8004272:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699a      	ldr	r2, [r3, #24]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f022 0204 	bic.w	r2, r2, #4
 8004282:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6999      	ldr	r1, [r3, #24]
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	691a      	ldr	r2, [r3, #16]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	619a      	str	r2, [r3, #24]
      break;
 8004296:	e0a5      	b.n	80043e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	68b9      	ldr	r1, [r7, #8]
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 faa0 	bl	80047e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	699a      	ldr	r2, [r3, #24]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699a      	ldr	r2, [r3, #24]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	6999      	ldr	r1, [r3, #24]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	021a      	lsls	r2, r3, #8
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	619a      	str	r2, [r3, #24]
      break;
 80042d8:	e084      	b.n	80043e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68b9      	ldr	r1, [r7, #8]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fb09 	bl	80048f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	69da      	ldr	r2, [r3, #28]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f042 0208 	orr.w	r2, r2, #8
 80042f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69da      	ldr	r2, [r3, #28]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0204 	bic.w	r2, r2, #4
 8004304:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69d9      	ldr	r1, [r3, #28]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	61da      	str	r2, [r3, #28]
      break;
 8004318:	e064      	b.n	80043e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68b9      	ldr	r1, [r7, #8]
 8004320:	4618      	mov	r0, r3
 8004322:	f000 fb71 	bl	8004a08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	69da      	ldr	r2, [r3, #28]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69da      	ldr	r2, [r3, #28]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	69d9      	ldr	r1, [r3, #28]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	021a      	lsls	r2, r3, #8
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	430a      	orrs	r2, r1
 8004358:	61da      	str	r2, [r3, #28]
      break;
 800435a:	e043      	b.n	80043e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68b9      	ldr	r1, [r7, #8]
 8004362:	4618      	mov	r0, r3
 8004364:	f000 fbba 	bl	8004adc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f042 0208 	orr.w	r2, r2, #8
 8004376:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f022 0204 	bic.w	r2, r2, #4
 8004386:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	691a      	ldr	r2, [r3, #16]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	430a      	orrs	r2, r1
 8004398:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800439a:	e023      	b.n	80043e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68b9      	ldr	r1, [r7, #8]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f000 fbfe 	bl	8004ba4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043b6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043c6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	021a      	lsls	r2, r3, #8
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80043dc:	e002      	b.n	80043e4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	75fb      	strb	r3, [r7, #23]
      break;
 80043e2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop

080043f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
 8004400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800440c:	2b01      	cmp	r3, #1
 800440e:	d101      	bne.n	8004414 <HAL_TIM_ConfigClockSource+0x1c>
 8004410:	2302      	movs	r3, #2
 8004412:	e0b6      	b.n	8004582 <HAL_TIM_ConfigClockSource+0x18a>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2202      	movs	r2, #2
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004432:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004436:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800443e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68ba      	ldr	r2, [r7, #8]
 8004446:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004450:	d03e      	beq.n	80044d0 <HAL_TIM_ConfigClockSource+0xd8>
 8004452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004456:	f200 8087 	bhi.w	8004568 <HAL_TIM_ConfigClockSource+0x170>
 800445a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800445e:	f000 8086 	beq.w	800456e <HAL_TIM_ConfigClockSource+0x176>
 8004462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004466:	d87f      	bhi.n	8004568 <HAL_TIM_ConfigClockSource+0x170>
 8004468:	2b70      	cmp	r3, #112	; 0x70
 800446a:	d01a      	beq.n	80044a2 <HAL_TIM_ConfigClockSource+0xaa>
 800446c:	2b70      	cmp	r3, #112	; 0x70
 800446e:	d87b      	bhi.n	8004568 <HAL_TIM_ConfigClockSource+0x170>
 8004470:	2b60      	cmp	r3, #96	; 0x60
 8004472:	d050      	beq.n	8004516 <HAL_TIM_ConfigClockSource+0x11e>
 8004474:	2b60      	cmp	r3, #96	; 0x60
 8004476:	d877      	bhi.n	8004568 <HAL_TIM_ConfigClockSource+0x170>
 8004478:	2b50      	cmp	r3, #80	; 0x50
 800447a:	d03c      	beq.n	80044f6 <HAL_TIM_ConfigClockSource+0xfe>
 800447c:	2b50      	cmp	r3, #80	; 0x50
 800447e:	d873      	bhi.n	8004568 <HAL_TIM_ConfigClockSource+0x170>
 8004480:	2b40      	cmp	r3, #64	; 0x40
 8004482:	d058      	beq.n	8004536 <HAL_TIM_ConfigClockSource+0x13e>
 8004484:	2b40      	cmp	r3, #64	; 0x40
 8004486:	d86f      	bhi.n	8004568 <HAL_TIM_ConfigClockSource+0x170>
 8004488:	2b30      	cmp	r3, #48	; 0x30
 800448a:	d064      	beq.n	8004556 <HAL_TIM_ConfigClockSource+0x15e>
 800448c:	2b30      	cmp	r3, #48	; 0x30
 800448e:	d86b      	bhi.n	8004568 <HAL_TIM_ConfigClockSource+0x170>
 8004490:	2b20      	cmp	r3, #32
 8004492:	d060      	beq.n	8004556 <HAL_TIM_ConfigClockSource+0x15e>
 8004494:	2b20      	cmp	r3, #32
 8004496:	d867      	bhi.n	8004568 <HAL_TIM_ConfigClockSource+0x170>
 8004498:	2b00      	cmp	r3, #0
 800449a:	d05c      	beq.n	8004556 <HAL_TIM_ConfigClockSource+0x15e>
 800449c:	2b10      	cmp	r3, #16
 800449e:	d05a      	beq.n	8004556 <HAL_TIM_ConfigClockSource+0x15e>
 80044a0:	e062      	b.n	8004568 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044b2:	f000 fc57 	bl	8004d64 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80044c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	609a      	str	r2, [r3, #8]
      break;
 80044ce:	e04f      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80044e0:	f000 fc40 	bl	8004d64 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689a      	ldr	r2, [r3, #8]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80044f2:	609a      	str	r2, [r3, #8]
      break;
 80044f4:	e03c      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004502:	461a      	mov	r2, r3
 8004504:	f000 fbb4 	bl	8004c70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	2150      	movs	r1, #80	; 0x50
 800450e:	4618      	mov	r0, r3
 8004510:	f000 fc0d 	bl	8004d2e <TIM_ITRx_SetConfig>
      break;
 8004514:	e02c      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004522:	461a      	mov	r2, r3
 8004524:	f000 fbd3 	bl	8004cce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	2160      	movs	r1, #96	; 0x60
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fbfd 	bl	8004d2e <TIM_ITRx_SetConfig>
      break;
 8004534:	e01c      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004542:	461a      	mov	r2, r3
 8004544:	f000 fb94 	bl	8004c70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2140      	movs	r1, #64	; 0x40
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fbed 	bl	8004d2e <TIM_ITRx_SetConfig>
      break;
 8004554:	e00c      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4619      	mov	r1, r3
 8004560:	4610      	mov	r0, r2
 8004562:	f000 fbe4 	bl	8004d2e <TIM_ITRx_SetConfig>
      break;
 8004566:	e003      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	73fb      	strb	r3, [r7, #15]
      break;
 800456c:	e000      	b.n	8004570 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800456e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004580:	7bfb      	ldrb	r3, [r7, #15]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a42      	ldr	r2, [pc, #264]	; (80046a8 <TIM_Base_SetConfig+0x11c>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d00f      	beq.n	80045c4 <TIM_Base_SetConfig+0x38>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045aa:	d00b      	beq.n	80045c4 <TIM_Base_SetConfig+0x38>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a3f      	ldr	r2, [pc, #252]	; (80046ac <TIM_Base_SetConfig+0x120>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d007      	beq.n	80045c4 <TIM_Base_SetConfig+0x38>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a3e      	ldr	r2, [pc, #248]	; (80046b0 <TIM_Base_SetConfig+0x124>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d003      	beq.n	80045c4 <TIM_Base_SetConfig+0x38>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a3d      	ldr	r2, [pc, #244]	; (80046b4 <TIM_Base_SetConfig+0x128>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d108      	bne.n	80045d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a33      	ldr	r2, [pc, #204]	; (80046a8 <TIM_Base_SetConfig+0x11c>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d01b      	beq.n	8004616 <TIM_Base_SetConfig+0x8a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e4:	d017      	beq.n	8004616 <TIM_Base_SetConfig+0x8a>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a30      	ldr	r2, [pc, #192]	; (80046ac <TIM_Base_SetConfig+0x120>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d013      	beq.n	8004616 <TIM_Base_SetConfig+0x8a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	4a2f      	ldr	r2, [pc, #188]	; (80046b0 <TIM_Base_SetConfig+0x124>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d00f      	beq.n	8004616 <TIM_Base_SetConfig+0x8a>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	4a2e      	ldr	r2, [pc, #184]	; (80046b4 <TIM_Base_SetConfig+0x128>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d00b      	beq.n	8004616 <TIM_Base_SetConfig+0x8a>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a2d      	ldr	r2, [pc, #180]	; (80046b8 <TIM_Base_SetConfig+0x12c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d007      	beq.n	8004616 <TIM_Base_SetConfig+0x8a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a2c      	ldr	r2, [pc, #176]	; (80046bc <TIM_Base_SetConfig+0x130>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d003      	beq.n	8004616 <TIM_Base_SetConfig+0x8a>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a2b      	ldr	r2, [pc, #172]	; (80046c0 <TIM_Base_SetConfig+0x134>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d108      	bne.n	8004628 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800461c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	4313      	orrs	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	4313      	orrs	r3, r2
 8004634:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a16      	ldr	r2, [pc, #88]	; (80046a8 <TIM_Base_SetConfig+0x11c>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d00f      	beq.n	8004674 <TIM_Base_SetConfig+0xe8>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a17      	ldr	r2, [pc, #92]	; (80046b4 <TIM_Base_SetConfig+0x128>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d00b      	beq.n	8004674 <TIM_Base_SetConfig+0xe8>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	4a16      	ldr	r2, [pc, #88]	; (80046b8 <TIM_Base_SetConfig+0x12c>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d007      	beq.n	8004674 <TIM_Base_SetConfig+0xe8>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	4a15      	ldr	r2, [pc, #84]	; (80046bc <TIM_Base_SetConfig+0x130>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d003      	beq.n	8004674 <TIM_Base_SetConfig+0xe8>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a14      	ldr	r2, [pc, #80]	; (80046c0 <TIM_Base_SetConfig+0x134>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d103      	bne.n	800467c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	691a      	ldr	r2, [r3, #16]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b01      	cmp	r3, #1
 800468c:	d105      	bne.n	800469a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f023 0201 	bic.w	r2, r3, #1
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	611a      	str	r2, [r3, #16]
  }
}
 800469a:	bf00      	nop
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40012c00 	.word	0x40012c00
 80046ac:	40000400 	.word	0x40000400
 80046b0:	40000800 	.word	0x40000800
 80046b4:	40013400 	.word	0x40013400
 80046b8:	40014000 	.word	0x40014000
 80046bc:	40014400 	.word	0x40014400
 80046c0:	40014800 	.word	0x40014800

080046c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	f023 0201 	bic.w	r2, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 0303 	bic.w	r3, r3, #3
 80046fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f023 0302 	bic.w	r3, r3, #2
 8004710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	4313      	orrs	r3, r2
 800471a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	4a2c      	ldr	r2, [pc, #176]	; (80047d0 <TIM_OC1_SetConfig+0x10c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d00f      	beq.n	8004744 <TIM_OC1_SetConfig+0x80>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	4a2b      	ldr	r2, [pc, #172]	; (80047d4 <TIM_OC1_SetConfig+0x110>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d00b      	beq.n	8004744 <TIM_OC1_SetConfig+0x80>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	4a2a      	ldr	r2, [pc, #168]	; (80047d8 <TIM_OC1_SetConfig+0x114>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d007      	beq.n	8004744 <TIM_OC1_SetConfig+0x80>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	4a29      	ldr	r2, [pc, #164]	; (80047dc <TIM_OC1_SetConfig+0x118>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d003      	beq.n	8004744 <TIM_OC1_SetConfig+0x80>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	4a28      	ldr	r2, [pc, #160]	; (80047e0 <TIM_OC1_SetConfig+0x11c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d10c      	bne.n	800475e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f023 0308 	bic.w	r3, r3, #8
 800474a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	4313      	orrs	r3, r2
 8004754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f023 0304 	bic.w	r3, r3, #4
 800475c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a1b      	ldr	r2, [pc, #108]	; (80047d0 <TIM_OC1_SetConfig+0x10c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00f      	beq.n	8004786 <TIM_OC1_SetConfig+0xc2>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a1a      	ldr	r2, [pc, #104]	; (80047d4 <TIM_OC1_SetConfig+0x110>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d00b      	beq.n	8004786 <TIM_OC1_SetConfig+0xc2>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a19      	ldr	r2, [pc, #100]	; (80047d8 <TIM_OC1_SetConfig+0x114>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d007      	beq.n	8004786 <TIM_OC1_SetConfig+0xc2>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a18      	ldr	r2, [pc, #96]	; (80047dc <TIM_OC1_SetConfig+0x118>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d003      	beq.n	8004786 <TIM_OC1_SetConfig+0xc2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a17      	ldr	r2, [pc, #92]	; (80047e0 <TIM_OC1_SetConfig+0x11c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d111      	bne.n	80047aa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800478c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004794:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	4313      	orrs	r3, r2
 800479e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	693a      	ldr	r2, [r7, #16]
 80047ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	68fa      	ldr	r2, [r7, #12]
 80047b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	621a      	str	r2, [r3, #32]
}
 80047c4:	bf00      	nop
 80047c6:	371c      	adds	r7, #28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	40012c00 	.word	0x40012c00
 80047d4:	40013400 	.word	0x40013400
 80047d8:	40014000 	.word	0x40014000
 80047dc:	40014400 	.word	0x40014400
 80047e0:	40014800 	.word	0x40014800

080047e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a1b      	ldr	r3, [r3, #32]
 80047f8:	f023 0210 	bic.w	r2, r3, #16
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	699b      	ldr	r3, [r3, #24]
 800480a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800481e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	021b      	lsls	r3, r3, #8
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	4313      	orrs	r3, r2
 800482a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f023 0320 	bic.w	r3, r3, #32
 8004832:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	697a      	ldr	r2, [r7, #20]
 800483c:	4313      	orrs	r3, r2
 800483e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4a28      	ldr	r2, [pc, #160]	; (80048e4 <TIM_OC2_SetConfig+0x100>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d003      	beq.n	8004850 <TIM_OC2_SetConfig+0x6c>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	4a27      	ldr	r2, [pc, #156]	; (80048e8 <TIM_OC2_SetConfig+0x104>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d10d      	bne.n	800486c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	68db      	ldr	r3, [r3, #12]
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800486a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a1d      	ldr	r2, [pc, #116]	; (80048e4 <TIM_OC2_SetConfig+0x100>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d00f      	beq.n	8004894 <TIM_OC2_SetConfig+0xb0>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a1c      	ldr	r2, [pc, #112]	; (80048e8 <TIM_OC2_SetConfig+0x104>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d00b      	beq.n	8004894 <TIM_OC2_SetConfig+0xb0>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a1b      	ldr	r2, [pc, #108]	; (80048ec <TIM_OC2_SetConfig+0x108>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d007      	beq.n	8004894 <TIM_OC2_SetConfig+0xb0>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a1a      	ldr	r2, [pc, #104]	; (80048f0 <TIM_OC2_SetConfig+0x10c>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d003      	beq.n	8004894 <TIM_OC2_SetConfig+0xb0>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a19      	ldr	r2, [pc, #100]	; (80048f4 <TIM_OC2_SetConfig+0x110>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d113      	bne.n	80048bc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800489a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048a2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	009b      	lsls	r3, r3, #2
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	4313      	orrs	r3, r2
 80048ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685a      	ldr	r2, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	621a      	str	r2, [r3, #32]
}
 80048d6:	bf00      	nop
 80048d8:	371c      	adds	r7, #28
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	40012c00 	.word	0x40012c00
 80048e8:	40013400 	.word	0x40013400
 80048ec:	40014000 	.word	0x40014000
 80048f0:	40014400 	.word	0x40014400
 80048f4:	40014800 	.word	0x40014800

080048f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6a1b      	ldr	r3, [r3, #32]
 800490c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 0303 	bic.w	r3, r3, #3
 8004932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68fa      	ldr	r2, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004944:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	021b      	lsls	r3, r3, #8
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	4313      	orrs	r3, r2
 8004950:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a27      	ldr	r2, [pc, #156]	; (80049f4 <TIM_OC3_SetConfig+0xfc>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d003      	beq.n	8004962 <TIM_OC3_SetConfig+0x6a>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a26      	ldr	r2, [pc, #152]	; (80049f8 <TIM_OC3_SetConfig+0x100>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d10d      	bne.n	800497e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004968:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	021b      	lsls	r3, r3, #8
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800497c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a1c      	ldr	r2, [pc, #112]	; (80049f4 <TIM_OC3_SetConfig+0xfc>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d00f      	beq.n	80049a6 <TIM_OC3_SetConfig+0xae>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a1b      	ldr	r2, [pc, #108]	; (80049f8 <TIM_OC3_SetConfig+0x100>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00b      	beq.n	80049a6 <TIM_OC3_SetConfig+0xae>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a1a      	ldr	r2, [pc, #104]	; (80049fc <TIM_OC3_SetConfig+0x104>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d007      	beq.n	80049a6 <TIM_OC3_SetConfig+0xae>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a19      	ldr	r2, [pc, #100]	; (8004a00 <TIM_OC3_SetConfig+0x108>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d003      	beq.n	80049a6 <TIM_OC3_SetConfig+0xae>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a18      	ldr	r2, [pc, #96]	; (8004a04 <TIM_OC3_SetConfig+0x10c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d113      	bne.n	80049ce <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80049b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	011b      	lsls	r3, r3, #4
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	699b      	ldr	r3, [r3, #24]
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	697a      	ldr	r2, [r7, #20]
 80049e6:	621a      	str	r2, [r3, #32]
}
 80049e8:	bf00      	nop
 80049ea:	371c      	adds	r7, #28
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr
 80049f4:	40012c00 	.word	0x40012c00
 80049f8:	40013400 	.word	0x40013400
 80049fc:	40014000 	.word	0x40014000
 8004a00:	40014400 	.word	0x40014400
 8004a04:	40014800 	.word	0x40014800

08004a08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b087      	sub	sp, #28
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a1b      	ldr	r3, [r3, #32]
 8004a1c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	685b      	ldr	r3, [r3, #4]
 8004a28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	021b      	lsls	r3, r3, #8
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004a56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	031b      	lsls	r3, r3, #12
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a18      	ldr	r2, [pc, #96]	; (8004ac8 <TIM_OC4_SetConfig+0xc0>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00f      	beq.n	8004a8c <TIM_OC4_SetConfig+0x84>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a17      	ldr	r2, [pc, #92]	; (8004acc <TIM_OC4_SetConfig+0xc4>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d00b      	beq.n	8004a8c <TIM_OC4_SetConfig+0x84>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a16      	ldr	r2, [pc, #88]	; (8004ad0 <TIM_OC4_SetConfig+0xc8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d007      	beq.n	8004a8c <TIM_OC4_SetConfig+0x84>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a15      	ldr	r2, [pc, #84]	; (8004ad4 <TIM_OC4_SetConfig+0xcc>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d003      	beq.n	8004a8c <TIM_OC4_SetConfig+0x84>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a14      	ldr	r2, [pc, #80]	; (8004ad8 <TIM_OC4_SetConfig+0xd0>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d109      	bne.n	8004aa0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	019b      	lsls	r3, r3, #6
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	697a      	ldr	r2, [r7, #20]
 8004aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	621a      	str	r2, [r3, #32]
}
 8004aba:	bf00      	nop
 8004abc:	371c      	adds	r7, #28
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	40012c00 	.word	0x40012c00
 8004acc:	40013400 	.word	0x40013400
 8004ad0:	40014000 	.word	0x40014000
 8004ad4:	40014400 	.word	0x40014400
 8004ad8:	40014800 	.word	0x40014800

08004adc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
 8004ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	041b      	lsls	r3, r3, #16
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a17      	ldr	r2, [pc, #92]	; (8004b90 <TIM_OC5_SetConfig+0xb4>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d00f      	beq.n	8004b56 <TIM_OC5_SetConfig+0x7a>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a16      	ldr	r2, [pc, #88]	; (8004b94 <TIM_OC5_SetConfig+0xb8>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d00b      	beq.n	8004b56 <TIM_OC5_SetConfig+0x7a>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a15      	ldr	r2, [pc, #84]	; (8004b98 <TIM_OC5_SetConfig+0xbc>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d007      	beq.n	8004b56 <TIM_OC5_SetConfig+0x7a>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a14      	ldr	r2, [pc, #80]	; (8004b9c <TIM_OC5_SetConfig+0xc0>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d003      	beq.n	8004b56 <TIM_OC5_SetConfig+0x7a>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a13      	ldr	r2, [pc, #76]	; (8004ba0 <TIM_OC5_SetConfig+0xc4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d109      	bne.n	8004b6a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	695b      	ldr	r3, [r3, #20]
 8004b62:	021b      	lsls	r3, r3, #8
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68fa      	ldr	r2, [r7, #12]
 8004b74:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	621a      	str	r2, [r3, #32]
}
 8004b84:	bf00      	nop
 8004b86:	371c      	adds	r7, #28
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	40012c00 	.word	0x40012c00
 8004b94:	40013400 	.word	0x40013400
 8004b98:	40014000 	.word	0x40014000
 8004b9c:	40014400 	.word	0x40014400
 8004ba0:	40014800 	.word	0x40014800

08004ba4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6a1b      	ldr	r3, [r3, #32]
 8004bb2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	021b      	lsls	r3, r3, #8
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004bea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	051b      	lsls	r3, r3, #20
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a18      	ldr	r2, [pc, #96]	; (8004c5c <TIM_OC6_SetConfig+0xb8>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d00f      	beq.n	8004c20 <TIM_OC6_SetConfig+0x7c>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a17      	ldr	r2, [pc, #92]	; (8004c60 <TIM_OC6_SetConfig+0xbc>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d00b      	beq.n	8004c20 <TIM_OC6_SetConfig+0x7c>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a16      	ldr	r2, [pc, #88]	; (8004c64 <TIM_OC6_SetConfig+0xc0>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d007      	beq.n	8004c20 <TIM_OC6_SetConfig+0x7c>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a15      	ldr	r2, [pc, #84]	; (8004c68 <TIM_OC6_SetConfig+0xc4>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d003      	beq.n	8004c20 <TIM_OC6_SetConfig+0x7c>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a14      	ldr	r2, [pc, #80]	; (8004c6c <TIM_OC6_SetConfig+0xc8>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d109      	bne.n	8004c34 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c26:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	029b      	lsls	r3, r3, #10
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	621a      	str	r2, [r3, #32]
}
 8004c4e:	bf00      	nop
 8004c50:	371c      	adds	r7, #28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40012c00 	.word	0x40012c00
 8004c60:	40013400 	.word	0x40013400
 8004c64:	40014000 	.word	0x40014000
 8004c68:	40014400 	.word	0x40014400
 8004c6c:	40014800 	.word	0x40014800

08004c70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b087      	sub	sp, #28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	f023 0201 	bic.w	r2, r3, #1
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f023 030a 	bic.w	r3, r3, #10
 8004cac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	693a      	ldr	r2, [r7, #16]
 8004cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	621a      	str	r2, [r3, #32]
}
 8004cc2:	bf00      	nop
 8004cc4:	371c      	adds	r7, #28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b087      	sub	sp, #28
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	60f8      	str	r0, [r7, #12]
 8004cd6:	60b9      	str	r1, [r7, #8]
 8004cd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6a1b      	ldr	r3, [r3, #32]
 8004ce4:	f023 0210 	bic.w	r2, r3, #16
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	031b      	lsls	r3, r3, #12
 8004cfe:	693a      	ldr	r2, [r7, #16]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	011b      	lsls	r3, r3, #4
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	621a      	str	r2, [r3, #32]
}
 8004d22:	bf00      	nop
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b085      	sub	sp, #20
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d46:	683a      	ldr	r2, [r7, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	f043 0307 	orr.w	r3, r3, #7
 8004d50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	609a      	str	r2, [r3, #8]
}
 8004d58:	bf00      	nop
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b087      	sub	sp, #28
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	021a      	lsls	r2, r3, #8
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	431a      	orrs	r2, r3
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	697a      	ldr	r2, [r7, #20]
 8004d96:	609a      	str	r2, [r3, #8]
}
 8004d98:	bf00      	nop
 8004d9a:	371c      	adds	r7, #28
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004db8:	2302      	movs	r3, #2
 8004dba:	e063      	b.n	8004e84 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a2b      	ldr	r2, [pc, #172]	; (8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d004      	beq.n	8004df0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a2a      	ldr	r2, [pc, #168]	; (8004e94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d108      	bne.n	8004e02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004df6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a1b      	ldr	r2, [pc, #108]	; (8004e90 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d018      	beq.n	8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e2e:	d013      	beq.n	8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a18      	ldr	r2, [pc, #96]	; (8004e98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00e      	beq.n	8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a17      	ldr	r2, [pc, #92]	; (8004e9c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d009      	beq.n	8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a12      	ldr	r2, [pc, #72]	; (8004e94 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d004      	beq.n	8004e58 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a13      	ldr	r2, [pc, #76]	; (8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d10c      	bne.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3714      	adds	r7, #20
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr
 8004e90:	40012c00 	.word	0x40012c00
 8004e94:	40013400 	.word	0x40013400
 8004e98:	40000400 	.word	0x40000400
 8004e9c:	40000800 	.word	0x40000800
 8004ea0:	40014000 	.word	0x40014000

08004ea4 <memset>:
 8004ea4:	4402      	add	r2, r0
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d100      	bne.n	8004eae <memset+0xa>
 8004eac:	4770      	bx	lr
 8004eae:	f803 1b01 	strb.w	r1, [r3], #1
 8004eb2:	e7f9      	b.n	8004ea8 <memset+0x4>

08004eb4 <__libc_init_array>:
 8004eb4:	b570      	push	{r4, r5, r6, lr}
 8004eb6:	4d0d      	ldr	r5, [pc, #52]	; (8004eec <__libc_init_array+0x38>)
 8004eb8:	4c0d      	ldr	r4, [pc, #52]	; (8004ef0 <__libc_init_array+0x3c>)
 8004eba:	1b64      	subs	r4, r4, r5
 8004ebc:	10a4      	asrs	r4, r4, #2
 8004ebe:	2600      	movs	r6, #0
 8004ec0:	42a6      	cmp	r6, r4
 8004ec2:	d109      	bne.n	8004ed8 <__libc_init_array+0x24>
 8004ec4:	4d0b      	ldr	r5, [pc, #44]	; (8004ef4 <__libc_init_array+0x40>)
 8004ec6:	4c0c      	ldr	r4, [pc, #48]	; (8004ef8 <__libc_init_array+0x44>)
 8004ec8:	f000 f818 	bl	8004efc <_init>
 8004ecc:	1b64      	subs	r4, r4, r5
 8004ece:	10a4      	asrs	r4, r4, #2
 8004ed0:	2600      	movs	r6, #0
 8004ed2:	42a6      	cmp	r6, r4
 8004ed4:	d105      	bne.n	8004ee2 <__libc_init_array+0x2e>
 8004ed6:	bd70      	pop	{r4, r5, r6, pc}
 8004ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004edc:	4798      	blx	r3
 8004ede:	3601      	adds	r6, #1
 8004ee0:	e7ee      	b.n	8004ec0 <__libc_init_array+0xc>
 8004ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ee6:	4798      	blx	r3
 8004ee8:	3601      	adds	r6, #1
 8004eea:	e7f2      	b.n	8004ed2 <__libc_init_array+0x1e>
 8004eec:	08004f44 	.word	0x08004f44
 8004ef0:	08004f44 	.word	0x08004f44
 8004ef4:	08004f44 	.word	0x08004f44
 8004ef8:	08004f48 	.word	0x08004f48

08004efc <_init>:
 8004efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efe:	bf00      	nop
 8004f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f02:	bc08      	pop	{r3}
 8004f04:	469e      	mov	lr, r3
 8004f06:	4770      	bx	lr

08004f08 <_fini>:
 8004f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f0a:	bf00      	nop
 8004f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f0e:	bc08      	pop	{r3}
 8004f10:	469e      	mov	lr, r3
 8004f12:	4770      	bx	lr
